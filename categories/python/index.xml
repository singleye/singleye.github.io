<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Python on 好奇心是探索未知世界的钥匙</title>
    <link>https://www.singleye.net/categories/python/</link>
    <description>Recent content in Python on 好奇心是探索未知世界的钥匙</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Sun, 10 Dec 2023 11:40:29 +0800</lastBuildDate>
    
	<atom:link href="https://www.singleye.net/categories/python/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>django-rest-framework 和 simplejwt 的类关系</title>
      <link>https://www.singleye.net/2023/12/django-rest-framework-%E5%92%8C-simplejwt-%E7%9A%84%E7%B1%BB%E5%85%B3%E7%B3%BB/</link>
      <pubDate>Sun, 10 Dec 2023 11:40:29 +0800</pubDate>
      
      <guid>https://www.singleye.net/2023/12/django-rest-framework-%E5%92%8C-simplejwt-%E7%9A%84%E7%B1%BB%E5%85%B3%E7%B3%BB/</guid>
      <description>&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Python 内存管理</title>
      <link>https://www.singleye.net/2023/11/python-%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/</link>
      <pubDate>Tue, 21 Nov 2023 14:40:28 +0800</pubDate>
      
      <guid>https://www.singleye.net/2023/11/python-%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/</guid>
      <description>&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>python2 和 python3 的一些区别</title>
      <link>https://www.singleye.net/2018/02/python2-%E5%92%8C-python3-%E7%9A%84%E4%B8%80%E4%BA%9B%E5%8C%BA%E5%88%AB/</link>
      <pubDate>Mon, 26 Feb 2018 23:30:06 +0800</pubDate>
      
      <guid>https://www.singleye.net/2018/02/python2-%E5%92%8C-python3-%E7%9A%84%E4%B8%80%E4%BA%9B%E5%8C%BA%E5%88%AB/</guid>
      <description> python2与python3的区别    区别点 python2 python3     write() 可以直接写utf8内容 写utf8内容碰到：TypeError: write() argument must be str, not bytes解决方法：open(file, &amp;lsquo;wb&amp;rsquo;)   super() super(CLASS_NAME, self).method() super().method()   / 除法运算，结果取整数 除法运算，结果为浮点数，取证书使用“//”   dict has_key()可以用来查询是否存在某个键 has_key()方法不存了，使用&amp;rsquo;key in dictionary&amp;rsquo;来查询(python2也支持该方法)    python3的新特性    新特性 描述 参考     @ 矩阵乘法运算符，目前还没有定义built-in的矩阵数据类型 PEP 465 - A dedicated infix operator for matrix multiplication   / 除法运算，结果浮点数    // 除法运算，结果取整数     </description>
    </item>
    
    <item>
      <title>python中__main__的作用域及变量使用</title>
      <link>https://www.singleye.net/2017/06/python%E4%B8%AD__main__%E7%9A%84%E4%BD%9C%E7%94%A8%E5%9F%9F%E5%8F%8A%E5%8F%98%E9%87%8F%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Sat, 10 Jun 2017 23:00:31 +0800</pubDate>
      
      <guid>https://www.singleye.net/2017/06/python%E4%B8%AD__main__%E7%9A%84%E4%BD%9C%E7%94%A8%E5%9F%9F%E5%8F%8A%E5%8F%98%E9%87%8F%E4%BD%BF%E7%94%A8/</guid>
      <description>今天使用python写一段小程序时发现了一个容易忽略掉的变量作用域的细节。先看一下问题。
$ cat main_variable.py x = 1 if __name__ == &amp;quot;__main__&amp;quot;: global x x = 2 $ python main_area.py main_area.py:4: SyntaxWarning: name &#39;x&#39; is assigned to before global declaration global x  程序的本来目的是在对全局变量前使用global进行声明，但却引发了SyntaxWarning异常。问题原因其实也很简单，因为虽然使用&amp;rsquo;if name == &amp;ldquo;main&amp;rdquo;&amp;lsquo;进行判断后再执行，但代码还是处于整个文件的作用域中，因此并不需要使用global进行声明。
因此程序可以有下面两种改法：
 方法1:  $ cat main_variable.py x = 1 if __name__ == &amp;quot;__main__&amp;quot;: x = 2 $ python main_area.py   方法2:  $ cat main_variable.py x = 1 def main(): global x x = 2 if __name__ == &amp;quot;__main__&amp;quot;: main() $ python main_area.</description>
    </item>
    
    <item>
      <title>numpy学习笔记[1]</title>
      <link>https://www.singleye.net/2017/03/numpy%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B01/</link>
      <pubDate>Thu, 16 Mar 2017 14:45:31 +0800</pubDate>
      
      <guid>https://www.singleye.net/2017/03/numpy%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B01/</guid>
      <description>numpy数据结构 基本数据    数据类型 描述     bool 用一个字节存储的布尔类型（True或False）   inti 由所在平台决定其大小的整数（一般为int32或int64）   int8 一个字节大小，-128 至 127   int16 整数，-32768 至 32767   int32 整数，-2 ** 31 至 2 ** 32 -1   int64 整数，-2 ** 63 至 2 ** 63 - 1   uint8 无符号整数，0 至 255   uint16 无符号整数，0 至 65535   uint32 无符号整数，0 至 2 ** 32 - 1   uint64 无符号整数，0 至 2 ** 64 - 1   float16 半精度浮点数：16位，正负号1位，指数5位，精度10位   float32 单精度浮点数：32位，正负号1位，指数8位，精度23位   float64或float 双精度浮点数：64位，正负号1位，指数11位，精度52位   complex64 复数，分别用两个32位浮点数表示实部和虚部   complex128或complex 复数，分别用两个64位浮点数表示实部和虚部    array ‘array’表示元素数据大小固定的同质（相同数据类型）多维度数据。</description>
    </item>
    
  </channel>
</rss>