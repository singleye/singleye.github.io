<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Go on 好奇心是探索未知世界的钥匙</title>
    <link>https://www.singleye.net/categories/go/</link>
    <description>Recent content in Go on 好奇心是探索未知世界的钥匙</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Tue, 05 Dec 2017 15:19:40 +0800</lastBuildDate>
    
	<atom:link href="https://www.singleye.net/categories/go/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>golang UDP中Read()/ReadFromUDP()/Write()/WriteToUDP()的使用</title>
      <link>https://www.singleye.net/2017/12/golang-udp%E4%B8%ADread/readfromudp/write/writetoudp%E7%9A%84%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Tue, 05 Dec 2017 15:19:40 +0800</pubDate>
      
      <guid>https://www.singleye.net/2017/12/golang-udp%E4%B8%ADread/readfromudp/write/writetoudp%E7%9A%84%E4%BD%BF%E7%94%A8/</guid>
      <description>学习golang进行UDP client/server通讯的过程中发现Read/ReadFromUDP/Write/WriteToUDP的使用有些需要注意之处，这里记录一下。
代码实验 UDP server UDP服务器端在调用&amp;rdquo;net.ListenUDP()&amp;ldquo;后创建&amp;rdquo;net.UDPConn&amp;rdquo;，read/write操作是通过这个UDPConn来完成的。因为listen的时候只指定了本地绑定的地址，它只能被动的接收来自客户端的消息，因此这个UDPConn在golang中为&amp;rsquo;unconnected&amp;rsquo;类型的。
这种类型的UDPConn的读操作可以接受Read()及ReadFromUDP()。区别是Read()无法知道远程连接的地址信息而ReadFromUDP()可以，所以如果后续需要跟远程进行双向通讯需要使用ReadFromUDP()。
这种类型的UDPConn在进行写操作时必须使用WriteToUDP()完成，并且需要指定对方的地址信息。
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48  package main import ( &amp;#34;flag&amp;#34; &amp;#34;fmt&amp;#34; &amp;#34;net&amp;#34; &amp;#34;os&amp;#34; ) var host = flag.</description>
    </item>
    
    <item>
      <title>GO语言依赖管理那些事儿</title>
      <link>https://www.singleye.net/2017/12/go%E8%AF%AD%E8%A8%80%E4%BE%9D%E8%B5%96%E7%AE%A1%E7%90%86%E9%82%A3%E4%BA%9B%E4%BA%8B%E5%84%BF/</link>
      <pubDate>Sat, 02 Dec 2017 18:17:23 +0800</pubDate>
      
      <guid>https://www.singleye.net/2017/12/go%E8%AF%AD%E8%A8%80%E4%BE%9D%E8%B5%96%E7%AE%A1%E7%90%86%E9%82%A3%E4%BA%9B%E4%BA%8B%E5%84%BF/</guid>
      <description>学习GO开发的过程中发现GO的依赖管理有些不够合理之处。
首先，使用GO开发时在假设项目及依赖关系都通过全系统唯一的GOPATH进行管理，可事实上一个开发人员不可能同时只做一个项目开发，不能假设不同项目的依赖都是一致的。这个问题自从v1.5引入vendor管理方法得到了一定改善。可是go get对vendor支持并不友好，这增加了管理的工作量。很多项目也被开发出来解决这个问题，比如&amp;rsquo;govendor&amp;rsquo;。
引入vendor方法后的项目依赖查找顺序如下：
 首先查找当前包下面的vendor目录 向上一级目录查找，直至找到src目录下的vendor目录 在GOPATH下面查找 在GOROOT下面查找  第二个不合理的地方，虽然引入了vendor目录解决单独项目的局部依赖管理问题，但依然要求把每个项目放入系统全局GOPATH中进行管理。可是一个项目可能只是一个大项目中的一小部分，而整个大项目可能有不同的开发语言构成，那么管理这种混合项目就是一个很麻烦的事情。另外每一个项目本身随着开发时间的推移会出现多个版本，当你在处理一个版本的问题是可能需要临时切换到另一个版本，基于同一个GOPATH目录开发时对于这种切换管理也并不算友好。&amp;rsquo;gb&amp;rsquo;这个项目开发出来后解决了这一问题，但这导致了项目管理必须使用gb工具，就连基本的build也脱离不开这种依赖，这也导致了本人碰到的第三个问题。
第三个不合理之处是对于编辑器的不友好。由于个人的主要编辑器是vim，并且使用了vim-go插件，这个插件支持了Go的开发工具链，可以在vim中方便的使用GoFmt/GoImports/GoBuild/GoTest等这些命令进行开发。但是由于gb对vim的支持欠缺导致在gb创建的项目若不放入标准的GOPATH中有些vim-go的命令执行会出现问题。</description>
    </item>
    
    <item>
      <title>Beego开发入门</title>
      <link>https://www.singleye.net/2017/11/beego%E5%BC%80%E5%8F%91%E5%85%A5%E9%97%A8/</link>
      <pubDate>Thu, 30 Nov 2017 18:04:31 +0800</pubDate>
      
      <guid>https://www.singleye.net/2017/11/beego%E5%BC%80%E5%8F%91%E5%85%A5%E9%97%A8/</guid>
      <description>安装  安装beego：  $ go get github.com/astaxie/beego  安装bee开发工具：  $ go get github.com/beego/bee $ bee Bee is a Fast and Flexible tool for managing your Beego Web Application. USAGE bee command [arguments] AVAILABLE COMMANDS version Prints the current Bee version migrate Runs database migrations api Creates a Beego API application bale Transforms non-Go files to Go source files fix Fixes your application by making it compatible with newer versions of Beego dlv Start a debugging session using Delve dockerize Generates a Dockerfile for your Beego application generate Source code generator hprose Creates an RPC application based on Hprose and Beego frameworks new Creates a Beego application pack Compresses a Beego application into a single file rs Run customized scripts run Run the application by starting a local development server server serving static content over HTTP on port Use bee help [command] for more information about a command.</description>
    </item>
    
    <item>
      <title>Go语言编程陷阱</title>
      <link>https://www.singleye.net/2017/11/go%E8%AF%AD%E8%A8%80%E7%BC%96%E7%A8%8B%E9%99%B7%E9%98%B1/</link>
      <pubDate>Tue, 14 Nov 2017 00:55:51 +0800</pubDate>
      
      <guid>https://www.singleye.net/2017/11/go%E8%AF%AD%E8%A8%80%E7%BC%96%E7%A8%8B%E9%99%B7%E9%98%B1/</guid>
      <description>陷阱1: &amp;ldquo;is pointer to interface, not interface&amp;rdquo; 执行下面代码会出现&amp;rdquo;type *net.Conn is pointer to interface, not interface)&amp;ldquo;错误，原因是因为&amp;rdquo;net.Conn&amp;rdquo;是interface而不是struct，不能用指针方式传递。
1 2 3 4 5 6 7 8 9  func connHandler(client *net.Conn) { // do something 	} func somefunc() { // ... 	client, _ := listener.Accept() connHandler(&amp;amp;client) }   GO语言中interface是一种特殊的数据结构，包含两部分内容：
 一个指向方法表的指针 一个指向实际数据的指针  因为这种特殊的数据结构所以interface的指针指向的结构既没有实际数据也没有对应方法，那么就无法直接访问所需的内容，鉴于此原因我推测GO语言的开发者直接屏蔽掉了指向interface指针的用法。这种情况的正确如下：
1 2 3 4 5 6 7 8 9  func connHandler(client net.Conn) { // do something 	} func somefunc() { // .</description>
    </item>
    
    <item>
      <title>GO开发技巧</title>
      <link>https://www.singleye.net/2017/11/go%E5%BC%80%E5%8F%91%E6%8A%80%E5%B7%A7/</link>
      <pubDate>Fri, 10 Nov 2017 20:37:07 +0800</pubDate>
      
      <guid>https://www.singleye.net/2017/11/go%E5%BC%80%E5%8F%91%E6%8A%80%E5%B7%A7/</guid>
      <description>1. 设置GO语言vim开发环境 在vim中开发GO最好安装相关的插件，比如vim-go这个插件。这个插件除了提供格式化、语法高亮、语法检测等功能以外还有很多方便的功能。
编译命令，对应go build：
:GoBuild  安装，对应go install：
:GoInstall  测试，对应go test：
:GoTest  运行一个单独测试：
:GoTestFunc  覆盖率：
:GoCoverage  运行当前程序，对应go run:
:GoRun  goto符号定义：
:GoDef  文档查询：
:GoDoc :GoDocBrowser  添加／删除包引用：
:GoImport :GoDrop  设置GOPATH：
:GoPath  在结构体增加／删除tag：
:GoAddTags :GoRemoveTags  静态语法检查：
:GoMetaLinter // 调用gometalinter :GoLint // 调用golint  高级代码分析：
:GoImplements :GoCallees :GoReferrers  重命名：
:GoRename  在vim中查询vim-go的帮助文档： :help vim-go  安装完成后打开vim，运行&amp;rdquo;:GoInstallBinaries&amp;rdquo;安装依赖的工具。
再安装其它依赖工具：
// gocode is used by many editors to provide intellisense go get github.</description>
    </item>
    
    <item>
      <title>Go语言中new与make的比较</title>
      <link>https://www.singleye.net/2017/11/go%E8%AF%AD%E8%A8%80%E4%B8%ADnew%E4%B8%8Emake%E7%9A%84%E6%AF%94%E8%BE%83/</link>
      <pubDate>Wed, 08 Nov 2017 10:58:00 +0000</pubDate>
      
      <guid>https://www.singleye.net/2017/11/go%E8%AF%AD%E8%A8%80%E4%B8%ADnew%E4%B8%8Emake%E7%9A%84%E6%AF%94%E8%BE%83/</guid>
      <description>go语言new()与make()的区别对于初入golang的开发者来说是个容易混淆的点，这里尝试对这两个的区别做一些总结。
官方文档 首先查找官方文档中的描述，首先是关于&amp;rsquo;new()&amp;lsquo;的：
1 2 3 4  // The new built-in function allocates memory. The first argument is a type, // not a value, and the value returned is a pointer to a newly // allocated zero value of that type. func new(Type) *Type   关于&amp;rsquo;make()&amp;rsquo;:
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17  // The make built-in function allocates and initializes an object of type // slice, map, or chan (only).</description>
    </item>
    
    <item>
      <title>GO语言中array与slice的比较</title>
      <link>https://www.singleye.net/2017/11/go%E8%AF%AD%E8%A8%80%E4%B8%ADarray%E4%B8%8Eslice%E7%9A%84%E6%AF%94%E8%BE%83/</link>
      <pubDate>Tue, 07 Nov 2017 14:25:00 +0000</pubDate>
      
      <guid>https://www.singleye.net/2017/11/go%E8%AF%AD%E8%A8%80%E4%B8%ADarray%E4%B8%8Eslice%E7%9A%84%E6%AF%94%E8%BE%83/</guid>
      <description>go语言中array与slice的区别总结
    数组array 切片slice 区别     声明定义 var arrayName [arrayLength] dataType var sliceName [] dataType 声明数组需要长度信息，定义slice时不需要   初始化 var arrayName = [arrayLength] dataType {Val1, &amp;hellip; Valn} var arrayName = [&amp;hellip;] dataType {Val1, &amp;hellip; Valn} var sliceName = [] dataType {Val1, &amp;hellip; Valn}var slice [] type = make([] type, length)通过数组初始化：slice := array[:]slice := array[startIndex:endIndex] 初始化数组时需要长度信息，初始化slice时不需要   取值 通过索引index取相应的元素值:arrayName[index] 通过index取元素值：slice[index] 返回一个新切片值: slice[startIndex:endIndex] slice取值除了可以获取一个元素的值外，还可以获取一个新的切片   赋值 元素赋值：array[index] = value  数组赋值： var new_array = array  new_array := array 元素赋值： slice[index] = value 将单个单个值append()到slice中，返回的新slice长度会增加:slice = append(slice, v1, v2&amp;hellip;) 将一个slice copy()到另一个slice中，目标slice长度不变，最多copy截止到目标元素最后一个元素： copy(slice1, slice2)  copy(slice1[si:], slice2) 数组支持简单的单元素或者整体赋值，slice则支持更加精细度的赋值   扩展 不支持 append()，新的slice length和capacity均发生变化： var slice = []int {1, 2, 3, 4, 5}slice = append(slice, 1, 2)fmt.</description>
    </item>
    
  </channel>
</rss>