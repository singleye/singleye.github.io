<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Vim on singleye</title>
    <link>/tags/vim/</link>
    <description>singleye (Vim)</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <managingEditor>**Email:** [singleye512@gmail.com](mailto:singleye512@gmail.com) (singleye)</managingEditor>
    <webMaster>**Email:** [singleye512@gmail.com](mailto:singleye512@gmail.com) (singleye)</webMaster>
    <lastBuildDate>Fri, 10 Nov 2017 20:37:07 +0800</lastBuildDate>
    
    <atom:link href="/tags/vim/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>GO开发技巧</title>
      <link>/2017/11/go%E5%BC%80%E5%8F%91%E6%8A%80%E5%B7%A7/</link>
      <pubDate>Fri, 10 Nov 2017 20:37:07 +0800</pubDate>
      <author>**Email:** [singleye512@gmail.com](mailto:singleye512@gmail.com) (singleye)</author>
      <guid>/2017/11/go%E5%BC%80%E5%8F%91%E6%8A%80%E5%B7%A7/</guid>
      <description>&lt;h2 id=&#34;1-设置go语言vim开发环境&#34; &gt;
&lt;div&gt;
    &lt;a href=&#34;#1-%e8%ae%be%e7%bd%aego%e8%af%ad%e8%a8%80vim%e5%bc%80%e5%8f%91%e7%8e%af%e5%a2%83&#34;&gt;
        #
    &lt;/a&gt;
    1. 设置GO语言vim开发环境
&lt;/div&gt;
&lt;/h2&gt;
&lt;p&gt;在vim中开发GO最好安装相关的插件，比如&lt;a href=&#34;https://github.com/fatih/vim-go&#34;&gt;vim-go&lt;/a&gt;这个插件。这个插件除了提供格式化、语法高亮、语法检测等功能以外还有很多方便的功能。&lt;/p&gt;
&lt;p&gt;编译命令，对应go build：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;:GoBuild
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;安装，对应go install：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;:GoInstall
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;测试，对应go test：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;:GoTest
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;运行一个单独测试：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;:GoTestFunc
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;覆盖率：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;:GoCoverage
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;运行当前程序，对应go run:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;:GoRun
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;goto符号定义：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;:GoDef
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;文档查询：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;:GoDoc
:GoDocBrowser
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;添加／删除包引用：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;:GoImport
:GoDrop
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;设置GOPATH：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;:GoPath
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;在结构体增加／删除tag：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;:GoAddTags
:GoRemoveTags
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;静态语法检查：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;:GoMetaLinter		// 调用gometalinter
:GoLint			// 调用golint
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;高级代码分析：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;:GoImplements
:GoCallees
:GoReferrers
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;重命名：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;:GoRename
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;在vim中查询vim-go的帮助文档&#34; &gt;
&lt;div&gt;
    &lt;a href=&#34;#%e5%9c%a8vim%e4%b8%ad%e6%9f%a5%e8%af%a2vim-go%e7%9a%84%e5%b8%ae%e5%8a%a9%e6%96%87%e6%a1%a3&#34;&gt;
        ##
    &lt;/a&gt;
    在vim中查询vim-go的帮助文档：
&lt;/div&gt;
&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;:help vim-go
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;安装完成后打开vim，运行&amp;quot;:GoInstallBinaries&amp;quot;安装依赖的工具。&lt;/p&gt;
&lt;p&gt;再安装其它依赖工具：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;// gocode is used by many editors to provide intellisense
go get github.com/nsf/gocode

// goimports is something you should run when saving code to fill in import paths
go get golang.org/x/tools/cmd/goimports

// gorename is used by many editors to provide identifier rename support
go get golang.org/x/tools/cmd/gorename

// oracle is a tool that help with code navigation and search
go get golang.org/x/tools/cmd/oracle

// golint should be run after every build to check your code
go get github.com/golang/lint/golint
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;2-其它常用工具&#34; &gt;
&lt;div&gt;
    &lt;a href=&#34;#2-%e5%85%b6%e5%ae%83%e5%b8%b8%e7%94%a8%e5%b7%a5%e5%85%b7&#34;&gt;
        #
    &lt;/a&gt;
    2. 其它常用工具
&lt;/div&gt;
&lt;/h2&gt;
&lt;h3 id=&#34;文件格式化&#34; &gt;
&lt;div&gt;
    &lt;a href=&#34;#%e6%96%87%e4%bb%b6%e6%a0%bc%e5%bc%8f%e5%8c%96&#34;&gt;
        ##
    &lt;/a&gt;
    文件格式化
&lt;/div&gt;
&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;gofmt &amp;lt;file&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;打印package信息&#34; &gt;
&lt;div&gt;
    &lt;a href=&#34;#%e6%89%93%e5%8d%b0package%e4%bf%a1%e6%81%af&#34;&gt;
        ##
    &lt;/a&gt;
    打印package信息
&lt;/div&gt;
&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;查询当前目录模块信息：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  go list
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;查询指定模块：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  go list &amp;lt;module&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;常用命令：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  go list -f &#39;{{ .Name }}&#39;

  go list -f &#39;{{ .Name }}: {{ .Doc }}&#39;

  go list -f &#39;{{ .Imports }}&#39;  // 结果用中括号输出

  $ go list -f &#39;{{.Imports}}&#39; fmt
  [errors io math os reflect strconv sync unicode/utf8]

  go list -f &#39;{{ join .Imports &amp;quot;\n&amp;quot;}}&#39;  // 结果用换行输出

  $ go list -f &#39;{{join .Imports &amp;quot;\n&amp;quot;}}&#39; fmt
  errors
  io
  math
  os
  reflect
  strconv
  sync
  unicode/utf8
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;跨平台编译&#34; &gt;
&lt;div&gt;
    &lt;a href=&#34;#%e8%b7%a8%e5%b9%b3%e5%8f%b0%e7%bc%96%e8%af%91&#34;&gt;
        ##
    &lt;/a&gt;
    跨平台编译：
&lt;/div&gt;
&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;GOOS=windows go build
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;查询文档&#34; &gt;
&lt;div&gt;
    &lt;a href=&#34;#%e6%9f%a5%e8%af%a2%e6%96%87%e6%a1%a3&#34;&gt;
        ##
    &lt;/a&gt;
    查询文档
&lt;/div&gt;
&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;查询当前模块：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  go doc
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;查询指定模块：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  go doc \&amp;lt;module\&amp;gt;
  go doc \&amp;lt;module\&amp;gt; [function]
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在线文档：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  godoc -http :8080
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;程序错误查询&#34; &gt;
&lt;div&gt;
    &lt;a href=&#34;#%e7%a8%8b%e5%ba%8f%e9%94%99%e8%af%af%e6%9f%a5%e8%af%a2&#34;&gt;
        ##
    &lt;/a&gt;
    程序错误查询
&lt;/div&gt;
&lt;/h3&gt;
&lt;p&gt;程序执行的时候有些情况下不会打印错误信息，因为go中没有exception，当错误出现时是通过返回error来捕捉错误信息，如果程序执行的时候没有捕捉错误信息，那么就会出现这种状况。对于这种状况可以通过命令&amp;quot;errcheck&amp;quot;来获得错误信息。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;命令：
errcheck
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;go-vet工具&#34; &gt;
&lt;div&gt;
    &lt;a href=&#34;#go-vet%e5%b7%a5%e5%85%b7&#34;&gt;
        ##
    &lt;/a&gt;
    go vet工具
&lt;/div&gt;
&lt;/h3&gt;
&lt;p&gt;go vet工具用来检查程序中可能的错误。&lt;/p&gt;
&lt;h2 id=&#34;3-测试&#34; &gt;
&lt;div&gt;
    &lt;a href=&#34;#3-%e6%b5%8b%e8%af%95&#34;&gt;
        #
    &lt;/a&gt;
    3. 测试
&lt;/div&gt;
&lt;/h2&gt;
&lt;h3 id=&#34;如何添加测试&#34; &gt;
&lt;div&gt;
    &lt;a href=&#34;#%e5%a6%82%e4%bd%95%e6%b7%bb%e5%8a%a0%e6%b5%8b%e8%af%95&#34;&gt;
        ##
    &lt;/a&gt;
    如何添加测试
&lt;/div&gt;
&lt;/h3&gt;
&lt;p&gt;通常在被测试的程序文件同目录下添加&amp;rsquo;_test.go&amp;rsquo;结尾的文件，例如当要测试&amp;rsquo;program.go&amp;rsquo;时在同一个目录下添加&amp;rsquo;program_test.go&amp;rsquo;文件。&lt;/p&gt;
&lt;p&gt;接下来是在&amp;rsquo;program_test.go&amp;rsquo;文件中添加测试代码。测试文件需要引入&amp;rsquo;testing&amp;rsquo;包。接下来是编写测试函数，测试函数需要&amp;rsquo;Test&amp;rsquo;字符开头，注意必须是大写&amp;rsquo;T&amp;rsquo;开头的&amp;rsquo;Test&amp;rsquo;。&lt;/p&gt;
&lt;p&gt;例如：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;import &amp;quot;testing&amp;quot;

func TestSomeFunction(t *testing.T) {
	// do some test here
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;table-driven-test&#34; &gt;
&lt;div&gt;
    &lt;a href=&#34;#table-driven-test&#34;&gt;
        ##
    &lt;/a&gt;
    table driven test
&lt;/div&gt;
&lt;/h3&gt;
&lt;p&gt;go测试推荐&amp;rsquo;table drive test&amp;rsquo;的方法，其实是一种编程技巧，使用这种方法可以在一定程度上简化测试代码。&lt;/p&gt;
&lt;p&gt;这种测试方法其实是将测试的输入／输出作为测试数据写在一个结构体内，并在测试代码中使用，写个简单的例子，比如说要测试一个简单的&amp;rsquo;sum&amp;rsquo;函数。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;func sum(a int, b int) int {
	return (a+b)
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;测试代码：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;// you&#39;re defining the test table here
var testCases = []struct {
    a      int
    b      int
    result int
}{
    {1, 2, 3},
    {3, 5, 8},
}

// test code
func TestSum(t *testing.T) {
    for _, tc := range testCases {
        r := sum(tc.a, tc.b)
        if r != tc.result {
            t.Errorf(&amp;quot;Failed case: param[%d, %d], result[%d], expected[%d]&amp;quot;, tc.a, tc.b, r, tc.result)
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;stdout重定向测试&#34; &gt;
&lt;div&gt;
    &lt;a href=&#34;#stdout%e9%87%8d%e5%ae%9a%e5%90%91%e6%b5%8b%e8%af%95&#34;&gt;
        ##
    &lt;/a&gt;
    stdout重定向测试
&lt;/div&gt;
&lt;/h3&gt;
&lt;p&gt;关于stdout重定向测试并不是一个测试的重点，只是有时候你写的一个函数需要输出一些字符到标准输出stdout上，比如使用fmt.Println()，如果此时恰好需要测试程序检测这种情况，那么这种技巧就可以派上用场了。&lt;/p&gt;
&lt;p&gt;比如有下面这样一段程序：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;func isNegative(i int) {
    if i &amp;lt; 0 {
        fmt.Println(&amp;quot;Negative&amp;quot;)
    } else {
        fmt.Println(&amp;quot;Non-negative&amp;quot;)
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这个程序的测试可以这样写：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;func captureStdoutWithParam(f func(p int), p int) string {
	// save the original stdout
	oldStdout := os.Stdout
	// create pipe to redirect the stdout to &#39;r&#39;
	r, w, _ := os.Pipe()
	os.Stdout = w

	f(p)

	w.Close()
	// restore the stdout
	os.Stdout = oldStdout
	out, _ := ioutil.ReadAll(r)

	return string(out)
}

func TestIsNegative(t *testing.T) {
	cases := []struct {
		input  int
		output string
	}{
		{-3, &amp;quot;Negative&amp;quot;},
		{0, &amp;quot;Non-negative&amp;quot;},
		{5, &amp;quot;Non-negative&amp;quot;},
	}

	for _, c := range cases {
		out := captureStdoutWithParam(isNegative, c.input)
		if !strings.Contains(out, c.output) {
			t.Errorf(&amp;quot;Expected [%s], get[%s]&amp;quot;, c.output, out)
		}
	}
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;4-debug&#34; &gt;
&lt;div&gt;
    &lt;a href=&#34;#4-debug&#34;&gt;
        #
    &lt;/a&gt;
    4. debug
&lt;/div&gt;
&lt;/h2&gt;
&lt;p&gt;go语言debug有几个选项：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;gdb&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/mailgun/godebug&#34;&gt;godebug&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/derekparker/delve&#34;&gt;Delve&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;gdb&#34; &gt;
&lt;div&gt;
    &lt;a href=&#34;#gdb&#34;&gt;
        ##
    &lt;/a&gt;
    gdb
&lt;/div&gt;
&lt;/h3&gt;
&lt;p&gt;关于gdb的使用go的官方文档似乎并不推荐。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;This applies to the standard toolchain (the gc Go compiler and tools). Gccgo has native gdb support. Besides this overview you might want to consult the GDB manual.&lt;/p&gt;
&lt;p&gt;GDB does not understand Go programs well. The stack management, threading, and runtime contain aspects that differ enough from the execution model GDB expects that they can confuse the debugger, even when the program is compiled with gccgo. As a consequence, although GDB can be useful in some situations, it is not a reliable debugger for Go programs, particularly heavily concurrent ones. Moreover, it is not a priority for the Go project to address these issues, which are difficult. In short, the instructions below should be taken only as a guide to how to use GDB when it works, not as a guarantee of success.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;godebug&#34; &gt;
&lt;div&gt;
    &lt;a href=&#34;#godebug&#34;&gt;
        ##
    &lt;/a&gt;
    godebug
&lt;/div&gt;
&lt;/h3&gt;
&lt;p&gt;在godebug的github上也表明这个工具已经过时了，并且推荐使用&amp;rsquo;delve&amp;rsquo;。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;DEPRECATED! There will be no further development. Please use &lt;a href=&#34;https://github.com/derekparker/delve&#34;&gt;https://github.com/derekparker/delve&lt;/a&gt;. But if you want to keep the project going and ready to become its maintaner please contact us and we can make you one.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;delve&#34; &gt;
&lt;div&gt;
    &lt;a href=&#34;#delve&#34;&gt;
        ##
    &lt;/a&gt;
    delve
&lt;/div&gt;
&lt;/h3&gt;
&lt;h4 id=&#34;安装&#34; &gt;
&lt;div&gt;
    &lt;a href=&#34;#%e5%ae%89%e8%a3%85&#34;&gt;
        ###
    &lt;/a&gt;
    安装
&lt;/div&gt;
&lt;/h4&gt;
&lt;p&gt;参考github文档中的&lt;a href=&#34;https://github.com/derekparker/delve/blob/master/Documentation/installation/osx/install.md&#34;&gt;安装方法&lt;/a&gt;。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;方法一：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  $ brew install go-delve/delve/delve
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;方法二：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  $ xcode-select --install
  $ go get -u github.com/derekparker/delve/cmd/dlv
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;接下来就可以使用dlv进行debug了。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ dlv --help
Delve is a source level debugger for Go programs.

Delve enables you to interact with your program by controlling the execution of the process,
evaluating variables, and providing information of thread / goroutine state, CPU register state and more.

The goal of this tool is to provide a simple yet powerful interface for debugging Go programs.

Pass flags to the program you are debugging using `--`, for example:

`dlv exec ./hello -- server --config conf/config.toml`

Usage:
  dlv [command]

Available Commands:
  attach      Attach to running process and begin debugging.
  connect     Connect to a headless debug server.
  core        Examine a core dump.
  debug       Compile and begin debugging main package in current directory, or the package specified.
  exec        Execute a precompiled binary, and begin a debug session.
  help        Help about any command
  run         Deprecated command. Use &#39;debug&#39; instead.
  test        Compile test binary and begin debugging program.
  trace       Compile and begin tracing program.
  version     Prints version.

Flags:
      --accept-multiclient   Allows a headless server to accept multiple client connections. Note that the server API is not reentrant and clients will have to coordinate.
      --api-version int      Selects API version when headless. (default 1)
      --backend string       Backend selection:
	default		Uses lldb on macOS, native everywhere else.
	native		Native backend.
	lldb		Uses lldb-server or debugserver.
	rr		Uses mozilla rr (https://github.com/mozilla/rr).
 (default &amp;quot;default&amp;quot;)
      --build-flags string   Build flags, to be passed to the compiler.
      --headless             Run debug server only, in headless mode.
      --init string          Init file, executed by the terminal client.
  -l, --listen string        Debugging server listen address. (default &amp;quot;localhost:0&amp;quot;)
      --log                  Enable debugging server logging.
      --wd string            Working directory for running the program. (default &amp;quot;.&amp;quot;)

Use &amp;quot;dlv [command] --help&amp;quot; for more information about a command.
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>使用vim进行16进制编辑</title>
      <link>/2017/11/%E4%BD%BF%E7%94%A8vim%E8%BF%9B%E8%A1%8C16%E8%BF%9B%E5%88%B6%E7%BC%96%E8%BE%91/</link>
      <pubDate>Thu, 09 Nov 2017 10:27:00 +0000</pubDate>
      <author>**Email:** [singleye512@gmail.com](mailto:singleye512@gmail.com) (singleye)</author>
      <guid>/2017/11/%E4%BD%BF%E7%94%A8vim%E8%BF%9B%E8%A1%8C16%E8%BF%9B%E5%88%B6%E7%BC%96%E8%BE%91/</guid>
      <description>&lt;!-- more /--&gt;
&lt;p&gt;记录一下使用vim编辑二进制文件的方法，这个方法使用了vim执行 &amp;lsquo;%!&amp;rsquo; 来打开外部程序的小技巧。&lt;/p&gt;
&lt;p&gt;使用vim打开任意文件，并运行下面命令便进入16禁止编辑模式：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;:%!xxd
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;退出时一定要记得使用下面命令，将编辑的hexdump内容还原成二进制：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;:%!xxd -r
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;使用这个技巧需要注意的是打开二进制文件编辑模式必须使用&amp;rsquo;-b&amp;rsquo;参数，否则vim会在编辑内容末尾增加0x0a字符，保存的时候也就会增加一个字节的信息。&lt;/p&gt;
&lt;p&gt;使用&amp;rsquo;-b&amp;rsquo;参数：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;00000000: 0011 2233                                ..&amp;quot;3
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;不使用&amp;rsquo;-b&amp;rsquo;参数：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;00000000: 0011 2233 0a                             ..&amp;quot;3.
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>
