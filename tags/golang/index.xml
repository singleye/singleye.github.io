<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Golang on 好奇心是探索未知世界的钥匙</title>
    <link>https://www.singleye.net/tags/golang/</link>
    <description>Recent content in Golang on 好奇心是探索未知世界的钥匙</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Tue, 05 Dec 2017 15:19:40 +0800</lastBuildDate>
    
	<atom:link href="https://www.singleye.net/tags/golang/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>golang UDP中Read()/ReadFromUDP()/Write()/WriteToUDP()的使用</title>
      <link>https://www.singleye.net/2017/12/golang-udp%E4%B8%ADread/readfromudp/write/writetoudp%E7%9A%84%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Tue, 05 Dec 2017 15:19:40 +0800</pubDate>
      
      <guid>https://www.singleye.net/2017/12/golang-udp%E4%B8%ADread/readfromudp/write/writetoudp%E7%9A%84%E4%BD%BF%E7%94%A8/</guid>
      <description>学习golang进行UDP client/server通讯的过程中发现Read/ReadFromUDP/Write/WriteToUDP的使用有些需要注意之处，这里记录一下。
代码实验 UDP server UDP服务器端在调用&amp;rdquo;net.ListenUDP()&amp;ldquo;后创建&amp;rdquo;net.UDPConn&amp;rdquo;，read/write操作是通过这个UDPConn来完成的。因为listen的时候只指定了本地绑定的地址，它只能被动的接收来自客户端的消息，因此这个UDPConn在golang中为&amp;rsquo;unconnected&amp;rsquo;类型的。
这种类型的UDPConn的读操作可以接受Read()及ReadFromUDP()。区别是Read()无法知道远程连接的地址信息而ReadFromUDP()可以，所以如果后续需要跟远程进行双向通讯需要使用ReadFromUDP()。
这种类型的UDPConn在进行写操作时必须使用WriteToUDP()完成，并且需要指定对方的地址信息。
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48  package main import ( &amp;#34;flag&amp;#34; &amp;#34;fmt&amp;#34; &amp;#34;net&amp;#34; &amp;#34;os&amp;#34; ) var host = flag.</description>
    </item>
    
    <item>
      <title>Go语言编程陷阱</title>
      <link>https://www.singleye.net/2017/11/go%E8%AF%AD%E8%A8%80%E7%BC%96%E7%A8%8B%E9%99%B7%E9%98%B1/</link>
      <pubDate>Tue, 14 Nov 2017 00:55:51 +0800</pubDate>
      
      <guid>https://www.singleye.net/2017/11/go%E8%AF%AD%E8%A8%80%E7%BC%96%E7%A8%8B%E9%99%B7%E9%98%B1/</guid>
      <description>陷阱1: &amp;ldquo;is pointer to interface, not interface&amp;rdquo; 执行下面代码会出现&amp;rdquo;type *net.Conn is pointer to interface, not interface)&amp;ldquo;错误，原因是因为&amp;rdquo;net.Conn&amp;rdquo;是interface而不是struct，不能用指针方式传递。
1 2 3 4 5 6 7 8 9  func connHandler(client *net.Conn) { // do something 	} func somefunc() { // ... 	client, _ := listener.Accept() connHandler(&amp;amp;client) }   GO语言中interface是一种特殊的数据结构，包含两部分内容：
 一个指向方法表的指针 一个指向实际数据的指针  因为这种特殊的数据结构所以interface的指针指向的结构既没有实际数据也没有对应方法，那么就无法直接访问所需的内容，鉴于此原因我推测GO语言的开发者直接屏蔽掉了指向interface指针的用法。这种情况的正确如下：
1 2 3 4 5 6 7 8 9  func connHandler(client net.Conn) { // do something 	} func somefunc() { // .</description>
    </item>
    
  </channel>
</rss>