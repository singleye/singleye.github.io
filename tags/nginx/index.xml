<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Nginx on singleye</title>
    <link>/tags/nginx/</link>
    <description>singleye (Nginx)</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <managingEditor>**Email:** [singleye512@gmail.com](mailto:singleye512@gmail.com) (singleye)</managingEditor>
    <webMaster>**Email:** [singleye512@gmail.com](mailto:singleye512@gmail.com) (singleye)</webMaster>
    <lastBuildDate>Sat, 23 Dec 2017 19:41:39 +0800</lastBuildDate>
    
    <atom:link href="/tags/nginx/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Nginx Static</title>
      <link>/2017/12/nginx-static/</link>
      <pubDate>Sat, 23 Dec 2017 19:41:39 +0800</pubDate>
      <author>**Email:** [singleye512@gmail.com](mailto:singleye512@gmail.com) (singleye)</author>
      <guid>/2017/12/nginx-static/</guid>
      <description>&lt;p&gt;nginx配置静态文件服务器&lt;/p&gt;
&lt;h1 id=&#34;搭建文件服务器&#34; &gt;
&lt;div&gt;
    &lt;a href=&#34;#%e6%90%ad%e5%bb%ba%e6%96%87%e4%bb%b6%e6%9c%8d%e5%8a%a1%e5%99%a8&#34;&gt;
        ##
    &lt;/a&gt;
    搭建文件服务器
&lt;/div&gt;
&lt;/h1&gt;
&lt;p&gt;要点就是root目录,会自动指向索引文件 如： index, index.html等&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;server {
        client_max_body_size 4G;
        listen  80;  ## listen for ipv4; this line is default and implied
        server_name static.test.sdk.iwplay.com.tw;
        root /home/mini/Sync;
        location / {
        }

}
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;建立索引&#34; &gt;
&lt;div&gt;
    &lt;a href=&#34;#%e5%bb%ba%e7%ab%8b%e7%b4%a2%e5%bc%95&#34;&gt;
        ##
    &lt;/a&gt;
    建立索引
&lt;/div&gt;
&lt;/h1&gt;
&lt;p&gt;建立目录索引也同样如此，不要带索引名称之类的文件，否则会直接显示文件，而不是目录&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;server {
        client_max_body_size 4G;
        listen  80;  ## listen for ipv4; this line is default and implied
        server_name static.test.sdk.iwplay.com.tw;
        root /home/mini/Sync;
     location / {
         autoindex on; //显示索引
         autoindex_exact_size on; //显示大小
         autoindex_localtime on;   //显示时间
        }

}
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;设置密码&#34; &gt;
&lt;div&gt;
    &lt;a href=&#34;#%e8%ae%be%e7%bd%ae%e5%af%86%e7%a0%81&#34;&gt;
        ##
    &lt;/a&gt;
    设置密码
&lt;/div&gt;
&lt;/h1&gt;
&lt;p&gt;搭建文件服务器有时候不想让别人任意访问，想做成一个私有的该怎么办呢，这个时候我们可以用到nginx自带的认证模块。 同样关键的是auth_basic/auth_basic_user_file字段&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;server {
        client_max_body_size 4G;
        listen  80;  ## listen for ipv4; this line is default and implied
        server_name static.test.sdk.iwplay.com.tw;
    root /home/mini/Sync;
     location / {
              auth_basic   &amp;quot;Restricted&amp;quot;;  
              auth_basic_user_file /etc/nginx/pass_file;
              autoindex on;
              autoindex_exact_size on;
              autoindex_localtime on;  
        }

}
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;auth_basic表示的输入密码时的提示语&lt;/li&gt;
&lt;li&gt;auth_basic_user_file则显示认证时的用户密码文件存放路径&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;生成用户密码&#34; &gt;
&lt;div&gt;
    &lt;a href=&#34;#%e7%94%9f%e6%88%90%e7%94%a8%e6%88%b7%e5%af%86%e7%a0%81&#34;&gt;
        ##
    &lt;/a&gt;
    生成用户密码
&lt;/div&gt;
&lt;/h1&gt;
&lt;p&gt;上文实现了用户认证，那么如何添加用户呢。nginx自带了一个功能，如下&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;htpasswd -c -d /etc/nginx/pass_file username
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这样就在/etc/nginx/pass_file 中添加了了一个用户&lt;/p&gt;
&lt;h1 id=&#34;开启压缩&#34; &gt;
&lt;div&gt;
    &lt;a href=&#34;#%e5%bc%80%e5%90%af%e5%8e%8b%e7%bc%a9&#34;&gt;
        ##
    &lt;/a&gt;
    开启压缩
&lt;/div&gt;
&lt;/h1&gt;
&lt;pre&gt;&lt;code&gt;server {
  client_max_body_size 4G;
  listen  80;  ## listen for ipv4; this line is default and implied
  server_name static.test.sdk.iwplay.com.tw;
  root /home/mini/Sync;
  
  # new config lines for gzip
  gzip on;
  gzip_min_length 1k;
  gzip_buffers 4 8k;
  gzip_http_version 1.1;
  gzip_types text/plain application/javascript application/x-javascript text/javascript text/css application/xml;
   
   location / {
       auth_basic   &amp;quot;Restricted&amp;quot;;  
       auth_basic_user_file /etc/nginx/pass_file;
       autoindex on;
       autoindex_exact_size on;
       autoindex_localtime on;  
   }
}&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>使用nginx搭建hugo静态blog服务</title>
      <link>/2017/01/%E4%BD%BF%E7%94%A8nginx%E6%90%AD%E5%BB%BAhugo%E9%9D%99%E6%80%81blog%E6%9C%8D%E5%8A%A1/</link>
      <pubDate>Tue, 10 Jan 2017 09:16:36 +0000</pubDate>
      <author>**Email:** [singleye512@gmail.com](mailto:singleye512@gmail.com) (singleye)</author>
      <guid>/2017/01/%E4%BD%BF%E7%94%A8nginx%E6%90%AD%E5%BB%BAhugo%E9%9D%99%E6%80%81blog%E6%9C%8D%E5%8A%A1/</guid>
      <description>&lt;p&gt;之前使用过wordpress搭建过内容管理网站，但是运行环境搭建有些复杂而且页面内容创建需要不够方便，后来关注到静态页面网站框架，发现可以使用markdown进行内容编辑，这对于程序猿来说简直再有好不过了！&lt;/p&gt;
&lt;p&gt;简单检索了一下静态内容管理的有很多实现，Ruby的Jekyll，Python的Sphinx doc，Go的Hugo，因为最近在学习Go所以决定搭建一个Hugo来研究下。&lt;/p&gt;
&lt;h1 id=&#34;使用源码部署hugo&#34; &gt;
&lt;div&gt;
    &lt;a href=&#34;#%e4%bd%bf%e7%94%a8%e6%ba%90%e7%a0%81%e9%83%a8%e7%bd%b2hugo&#34;&gt;
        ##
    &lt;/a&gt;
    使用源码部署hugo
&lt;/div&gt;
&lt;/h1&gt;
&lt;h2 id=&#34;部署golang&#34; &gt;
&lt;div&gt;
    &lt;a href=&#34;#%e9%83%a8%e7%bd%b2golang&#34;&gt;
        #
    &lt;/a&gt;
    部署golang
&lt;/div&gt;
&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;
  $ yum install golang
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;下载hugo源代码&#34; &gt;
&lt;div&gt;
    &lt;a href=&#34;#%e4%b8%8b%e8%bd%bdhugo%e6%ba%90%e4%bb%a3%e7%a0%81&#34;&gt;
        #
    &lt;/a&gt;
    下载hugo源代码
&lt;/div&gt;
&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;
  $ wget https://github.com/spf13/hugo/archive/v0.18.1.tar.gz
  $ tar xf v0.18.1.tar.gz
  $ cd hugo-0.18.1/
  $ export GOPATH=/usr/local/go
  $ go get -v github.com/spf13/hugo
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;hugo的基本使用&#34; &gt;
&lt;div&gt;
    &lt;a href=&#34;#hugo%e7%9a%84%e5%9f%ba%e6%9c%ac%e4%bd%bf%e7%94%a8&#34;&gt;
        ##
    &lt;/a&gt;
    hugo的基本使用
&lt;/div&gt;
&lt;/h1&gt;
&lt;h2 id=&#34;创建项目&#34; &gt;
&lt;div&gt;
    &lt;a href=&#34;#%e5%88%9b%e5%bb%ba%e9%a1%b9%e7%9b%ae&#34;&gt;
        #
    &lt;/a&gt;
    创建项目
&lt;/div&gt;
&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;
  $ /usr/local/go/bin/hugo new site myblogs
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;创建post&#34; &gt;
&lt;div&gt;
    &lt;a href=&#34;#%e5%88%9b%e5%bb%bapost&#34;&gt;
        #
    &lt;/a&gt;
    创建post
&lt;/div&gt;
&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;
  $ /usr/local/go/bin/hugo new post/first.md
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;使用themes&#34; &gt;
&lt;div&gt;
    &lt;a href=&#34;#%e4%bd%bf%e7%94%a8themes&#34;&gt;
        #
    &lt;/a&gt;
    使用themes
&lt;/div&gt;
&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;
  $ cd themes/
  $ git clone https://github.com/kakawait/hugo-tranquilpeak-theme.git
  $ cp hugo-tranquilpeak-theme/exampleSite/* ..
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;构造页面&#34; &gt;
&lt;div&gt;
    &lt;a href=&#34;#%e6%9e%84%e9%80%a0%e9%a1%b5%e9%9d%a2&#34;&gt;
        #
    &lt;/a&gt;
    构造页面
&lt;/div&gt;
&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;
  $ cd content
  $ mkdir archives
  $ touch archives/_index.md
  $ mkdir categories
  $ touch categories/_index.md
  $ mkdir tags
  $ touch tags/_index.md
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;执行成功后创建出下面的页面：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  http://[Your_blog_DNS]/archives
  http://[Your_blog_DNS]/categories
  http://[Your_blog_DNS]/tags
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;服务部署&#34; &gt;
&lt;div&gt;
    &lt;a href=&#34;#%e6%9c%8d%e5%8a%a1%e9%83%a8%e7%bd%b2&#34;&gt;
        ##
    &lt;/a&gt;
    服务部署
&lt;/div&gt;
&lt;/h1&gt;
&lt;p&gt;第一步，使用 hugo 命令生成静态文件内容&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ cd &amp;lt;hugo project home&amp;gt;
$ hugo
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;执行完以上操作后会在项目目录中产生 public 目录，这个目录中包括了可以部署的静态文件。把 public 目录复制到 nginx 的公开目录中。&lt;/p&gt;
&lt;p&gt;第二步，配置 nginx&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;server {
  listen       80;
  listen       [::]:80;
  server_name  yourhostname;

  location / {
    root /directory/of/public;
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;至此，系统的搭建基本完成，赶紧访问吧 :-)&lt;/p&gt;
&lt;h1 id=&#34;hugo-theme开发&#34; &gt;
&lt;div&gt;
    &lt;a href=&#34;#hugo-theme%e5%bc%80%e5%8f%91&#34;&gt;
        ##
    &lt;/a&gt;
    hugo theme开发
&lt;/div&gt;
&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;templating
&lt;ul&gt;
&lt;li&gt;变量访问: {{ var }}&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;front matter&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://gohugo.io/variables/&#34;&gt;variables&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;Site variables
&lt;ul&gt;
&lt;li&gt;作用：访问站点配置文件中的内容&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Page variables&lt;/li&gt;
&lt;li&gt;File variables&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>
