<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Esp-Open-Sdk on singleye</title>
    <link>/tags/esp-open-sdk/</link>
    <description>singleye (Esp-Open-Sdk)</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <managingEditor>**Email:** [singleye512@gmail.com](mailto:singleye512@gmail.com) (singleye)</managingEditor>
    <webMaster>**Email:** [singleye512@gmail.com](mailto:singleye512@gmail.com) (singleye)</webMaster>
    <lastBuildDate>Sat, 08 Apr 2017 00:10:24 +0800</lastBuildDate>
    
    <atom:link href="/tags/esp-open-sdk/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>在Mac OS上设置ESP 8266开发环境</title>
      <link>/2017/04/%E5%9C%A8mac-os%E4%B8%8A%E8%AE%BE%E7%BD%AEesp-8266%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/</link>
      <pubDate>Sat, 08 Apr 2017 00:10:24 +0800</pubDate>
      <author>**Email:** [singleye512@gmail.com](mailto:singleye512@gmail.com) (singleye)</author>
      <guid>/2017/04/%E5%9C%A8mac-os%E4%B8%8A%E8%AE%BE%E7%BD%AEesp-8266%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/</guid>
      <description>&lt;p&gt;做物联网产品开发有段时间了，虽然开发了两款智能产品，但hands-on的开发一直都在服务器和应用层进行，硬件层的研发并没有真的深入下去。决定有时间也对这个层面学习学习，软硬都能搞才算得上是全栈吧 :-P&lt;/p&gt;
&lt;p&gt;要完成一个物联网产品的开发需要解决联网的问题。目前解决联网的比较常用的方案有Wi-Fi和GSM两种（NB-IOT也在上升势头，相信一年后会有较多的应用出现）。这次先学习下乐鑫ESP 8266 WI-FI芯片的开发。&lt;/p&gt;
&lt;p&gt;由于我用的是Mac OS，所以就介绍如何在Mac上进行8266的环境设置。&lt;/p&gt;
&lt;h2 id=&#34;安装使用esp-open-sdk&#34; &gt;
&lt;div&gt;
    &lt;a href=&#34;#%e5%ae%89%e8%a3%85%e4%bd%bf%e7%94%a8esp-open-sdk&#34;&gt;
        #
    &lt;/a&gt;
    安装使用esp-open-sdk
&lt;/div&gt;
&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;1.安装依赖关系&lt;/strong&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;brew install gnu-sed --with-default-names
brew tap homebrew/dupes
brew install gperf
brew install grep
brew install autoconf
brew install binutils
brew install gawk
brew install wget
brew install automake
brew install libtool
brew install help2man
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;a href=&#34;http://www.esp8266.com/wiki/doku.php?id=setup-osx-compiler-esp8266#esp-open-sdk_with_brew&#34;&gt;参考&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2.准备case-sensitive分区&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;由于Mac OS的分区默认是case-insensitive的，而编译需要在case-sensitive的分区上进行，所以需要创建一个独立分区解决这个问题(linux系统上没有这个问题)。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;hdiutil create ~/Desktop/eos.dmg -volname &amp;#34;esp-open-sdk&amp;#34; -size 10g -fs &amp;#34;Case-sensitive HFS+&amp;#34;
hdiutil mount ~/Desktop/eos.dmg
cd /Volumes/esp-open-sdk
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;3.编译esp-open-sdk&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;下载代码库，使用&amp;rsquo;&amp;ndash;recursive&amp;rsquo;会同时下载crosstool-NG／esp-open-lwip／esptool／lx106-hal子模块&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;git clone --recursive https://github.com/pfalcon/esp-open-sdk.git
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;编译有两种方式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;方式一(STANDALONE=y)：将toolchain与SDK一起编译安装，这种方式操作简单方便，而且后期开发编译时不需要指定-I／-L参数，缺点是不便于今后SDK升级。&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;make STANDALONE=y
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;方式二(STANDALONE=n)：只编译Xtensa toolchain，不编译8266 SDK，这种方式便于今后SDK升级。&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;make STANDALONE=n
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;编译完成后会在当前目录下生成&amp;rsquo;xtensa-lx106-elf&amp;rsquo;目录，将&amp;rsquo;xtensa-lx106-elf/bin&amp;rsquo;添加到PATH环境变量中以便开发时使用编译器&amp;rsquo;xtensa-lx106-elf-gcc&#39;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;export PATH=$PATH:`pwd`/xtensa-lx106-elf/bin/
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;最后，esptool.py使用需要安装&amp;rsquo;pySerial&amp;rsquo;这个python库&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;pip install pyserial
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;4.测试开发环境&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;esp-open-sdk自带example，可以编译一下来测试开发环境是否设置好了&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;cd examples/blinky
make
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;如果编译成功通过则说明esp-open-sdk安装成功了。&lt;/p&gt;
&lt;h2 id=&#34;使用esp8266-rtos-sdk&#34; &gt;
&lt;div&gt;
    &lt;a href=&#34;#%e4%bd%bf%e7%94%a8esp8266-rtos-sdk&#34;&gt;
        #
    &lt;/a&gt;
    使用ESP8266 RTOS SDK
&lt;/div&gt;
&lt;/h2&gt;
&lt;p&gt;8266还有一套基于FreeRTOS的SDK，配置这套SDK之前需要先完成前面的esp-open-sdk的配置。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1.构建SDK&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;我选择把这套SDK构建到同一个分区上。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;cd /Volumes/esp-open-sdk
git clone https://github.com/espressif/ESP8266_RTOS_SDK.git
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;完成后需要设置两个环境变量&amp;rsquo;SDK_PATH&amp;rsquo;, &amp;lsquo;BIN_PATH&amp;rsquo;。为了简化设置我把这连个环境变量设知道&amp;rsquo;~/.bash_profile&amp;rsquo;文件中，这样可以每次打开shell后自动加载：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;# ESP 8266 dev env
ESP_8266_OPEN_SDK=/Volumes/esp-open-sdk/esp-open-sdk/xtensa-lx106-elf/
ESP_8266_RTOS_SDK=/Volumes/esp-open-sdk/ESP8266_RTOS_SDK
ESP_8266_RTOS_SDK_BIN=/Volumes/esp-open-sdk/ESP8266_RTOS_BIN
export SDK_PATH=$ESP_8266_RTOS_SDK
export BIN_PATH=$ESP_8266_RTOS_SDK_BIN
PATH=$PATH:$ESP_8266_OPEN_SDK/bin
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;2.开发方法&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;RTOS SDK的代码目录中有一个样板程序，开发时可以把这个模版拷贝到开发目录中，然后运行gen_misc.sh进行编译。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;cp -r examples/project_template ~/test
cd ~/test/project_template
sh gen_misc.sh
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;运行gen_misc.sh后会有若干选项，按照提示操作下去最后就会编译出的文件会放到‘BIN_PATH’目录下&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;ls /Volumes/esp-open-sdk/ESP8266_RTOS_BIN/
eagle.S             eagle.dump          eagle.flash.bin     eagle.irom0text.bin
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;烧录程序&#34; &gt;
&lt;div&gt;
    &lt;a href=&#34;#%e7%83%a7%e5%bd%95%e7%a8%8b%e5%ba%8f&#34;&gt;
        #
    &lt;/a&gt;
    烧录程序
&lt;/div&gt;
&lt;/h2&gt;
&lt;h3 id=&#34;串口驱动&#34; &gt;
&lt;div&gt;
    &lt;a href=&#34;#%e4%b8%b2%e5%8f%a3%e9%a9%b1%e5%8a%a8&#34;&gt;
        ##
    &lt;/a&gt;
    串口驱动
&lt;/div&gt;
&lt;/h3&gt;
&lt;p&gt;烧录前需要先将硬件连到电脑上，如果使用的是nodeMCU的话会比较方便，只需要使用一根micro USB数据线，并下载这个驱动：&lt;a href=&#34;https://www.silabs.com/products/development-tools/software/usb-to-uart-bridge-vcp-drivers&#34;&gt;nodeMCU USBtoUART驱动&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;烧录工具esptoolpy&#34; &gt;
&lt;div&gt;
    &lt;a href=&#34;#%e7%83%a7%e5%bd%95%e5%b7%a5%e5%85%b7esptoolpy&#34;&gt;
        ##
    &lt;/a&gt;
    烧录工具esptool.py
&lt;/div&gt;
&lt;/h3&gt;
&lt;p&gt;安装完驱动后就可以连接烧录了，程序烧录可以使用esptool.py工具完成，使用方法如下：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;esptool.py --port &amp;lt;serial-port-of-ESP8266&amp;gt; write_flash -fm &amp;lt;mode&amp;gt; 0x00000 &amp;lt;nodemcu-firmware&amp;gt;.bin
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;参考资料&#34; &gt;
&lt;div&gt;
    &lt;a href=&#34;#%e5%8f%82%e8%80%83%e8%b5%84%e6%96%99&#34;&gt;
        #
    &lt;/a&gt;
    参考资料
&lt;/div&gt;
&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/pfalcon/esp-open-sdk&#34;&gt;esp-open-sdk&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/espressif/ESP8266_RTOS_SDK&#34;&gt;ESP8266-RTOS-SDK&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>
