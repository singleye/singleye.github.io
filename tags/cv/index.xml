<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Cv on singleye</title>
    <link>/tags/cv/</link>
    <description>singleye (Cv)</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <managingEditor>**Email:** [singleye512@gmail.com](mailto:singleye512@gmail.com) (singleye)</managingEditor>
    <webMaster>**Email:** [singleye512@gmail.com](mailto:singleye512@gmail.com) (singleye)</webMaster>
    <lastBuildDate>Sat, 07 May 2022 01:05:50 +0800</lastBuildDate>
    
    <atom:link href="/tags/cv/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>摄像机模型及实现</title>
      <link>/2022/05/%E6%91%84%E5%83%8F%E6%9C%BA%E6%A8%A1%E5%9E%8B%E5%8F%8A%E5%AE%9E%E7%8E%B0/</link>
      <pubDate>Sat, 07 May 2022 01:05:50 +0800</pubDate>
      <author>**Email:** [singleye512@gmail.com](mailto:singleye512@gmail.com) (singleye)</author>
      <guid>/2022/05/%E6%91%84%E5%83%8F%E6%9C%BA%E6%A8%A1%E5%9E%8B%E5%8F%8A%E5%AE%9E%E7%8E%B0/</guid>
      <description>&lt;!--toc--&gt;
&lt;p&gt;3D 设计软件和游戏中的图像经常是以一个观测者的角度展示的，可以把这个过程想象成一个人拿着一台摄像机在拍摄，在机器视觉中叫摄像机模型。&lt;/p&gt;
&lt;p&gt;研究过程中基于 OpenCV 做了一个简单实现，项目代码可以在这里下载到 &lt;a href=&#34;https://github.com/singleye/camera-model&#34;&gt;“github 代码下载”&lt;/a&gt;，欢迎大家下载交流。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://www.singleye.net/media/2022/05/camera-model-1.png&#34; alt=&#34;camera&#34;&gt;&lt;/p&gt;
&lt;h1 id=&#34;摄像机模型的数学模型&#34; &gt;
&lt;div&gt;
    &lt;a href=&#34;#%e6%91%84%e5%83%8f%e6%9c%ba%e6%a8%a1%e5%9e%8b%e7%9a%84%e6%95%b0%e5%ad%a6%e6%a8%a1%e5%9e%8b&#34;&gt;
        ##
    &lt;/a&gt;
    摄像机模型的数学模型
&lt;/div&gt;
&lt;/h1&gt;
&lt;h2 id=&#34;座标系&#34; &gt;
&lt;div&gt;
    &lt;a href=&#34;#%e5%ba%a7%e6%a0%87%e7%b3%bb&#34;&gt;
        #
    &lt;/a&gt;
    座标系
&lt;/div&gt;
&lt;/h2&gt;
&lt;p&gt;理解摄像机模型需要建立对应的座标系，在这个模型里面涉及到了下面 3 个座标系：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;世界座标系 (World frame)&lt;/p&gt;
&lt;p&gt;被观测目标存在于世界座标系中，使用世界座标系座标表示位置，是个 3 维座标系，可以使用常用的单位，比如‘米’。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;相机座标系 (Camera frame)&lt;/p&gt;
&lt;p&gt;通常使用摄像机的光学中心为原点，是一个 3 维座标系，表示从相机的光学中心原点来衡量各个目标的位置，尺度可以保持和世界座标系统一，比如都使用‘米’；相机可以移动到世界座标系中的任意位置和任意角度（姿态）。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;像平面座标系 (Image plane frame)&lt;/p&gt;
&lt;p&gt;这是最终观测的图像座标系，是一个 3 维座标系，在相机中是 CCD 的座标系，例如以左上角为原点，尺度为‘像素’。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;http://www.singleye.net/media/2022/05/camera-model-2.png&#34; alt=&#34;coordinate&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;座标转换&#34; &gt;
&lt;div&gt;
    &lt;a href=&#34;#%e5%ba%a7%e6%a0%87%e8%bd%ac%e6%8d%a2&#34;&gt;
        #
    &lt;/a&gt;
    座标转换
&lt;/div&gt;
&lt;/h2&gt;
&lt;p&gt;当移动摄像机时，摄像机成像的结果可以通过座标转换来完成：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;把世界座标系中的物体座标进行&amp;rsquo;座标系变换&amp;rsquo;，转换成相机座标系中的座标&lt;/li&gt;
&lt;li&gt;通过相机内参转换到像平面座标系&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;座标系变换过程&#34; &gt;
&lt;div&gt;
    &lt;a href=&#34;#%e5%ba%a7%e6%a0%87%e7%b3%bb%e5%8f%98%e6%8d%a2%e8%bf%87%e7%a8%8b&#34;&gt;
        ##
    &lt;/a&gt;
    座标系变换过程
&lt;/div&gt;
&lt;/h3&gt;
&lt;p&gt;世界座标 $O_w$ 用下面形式表示:&lt;/p&gt;
$$
\left(
	\begin{matrix}
		X_w \\
		Y_w \\
		Z_w
	\end{matrix}
\right)
$$
&lt;p&gt;摄像机在世界座标系中被移动到 $t$ 位置：&lt;/p&gt;
$$
\left(
	\begin{matrix}
		x_t \\
		y_t \\
		z_t
	\end{matrix}
\right)
$$
&lt;p&gt;&lt;strong&gt;第一步&lt;/strong&gt;：先抵消掉摄像机的空间移动 $t$，也就是 $O_w - t$。这一步后新的座标系与摄像机座标系原点重叠。&lt;/p&gt;
&lt;div&gt;
$$
\left(
	\begin{matrix}
		O_w - t
	\end{matrix}
\right)=
\left(
	\begin{matrix}
		X_w - t_x \\\
		Y_w - t_y \\\
		Z_w - t_z
	\end{matrix}
\right)
$$
&lt;/div&gt;
&lt;p&gt;&lt;img src=&#34;http://www.singleye.net/media/2022/05/camera-model-3.png&#34; alt=&#34;Step1&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;第二步&lt;/strong&gt;：旋转座标系第一步后的新座标系到摄像机座标座标系，旋转矩阵 $R$ ，关于座标旋转参见&lt;a href=&#34;http://www.singleye.net/2021/01/%E6%97%8B%E8%BD%AC%E7%9F%A9%E9%98%B5/&#34;&gt;旋转矩阵&lt;/a&gt;，完成旋转后得到了摄像机座标系下的座标 $O_c$&lt;/p&gt;
&lt;div&gt;
$$
O_c =
R*
\left(
		O_w - t
\right)=
R*
\left(
	\begin{matrix}
		X_w - t_x \\\
		Y_w - t_y \\\
		Z_w - t_z
	\end{matrix}
\right)
=
\left(
	\begin{matrix}
		X_c \\\
		Y_c \\\
		Z_c
	\end{matrix}
\right)
$$
&lt;/div&gt;
&lt;p&gt;&lt;img src=&#34;http://www.singleye.net/media/2022/05/camera-model-4.png&#34; alt=&#34;Step2&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;相机座标转化到像平面座标&#34; &gt;
&lt;div&gt;
    &lt;a href=&#34;#%e7%9b%b8%e6%9c%ba%e5%ba%a7%e6%a0%87%e8%bd%ac%e5%8c%96%e5%88%b0%e5%83%8f%e5%b9%b3%e9%9d%a2%e5%ba%a7%e6%a0%87&#34;&gt;
        ##
    &lt;/a&gt;
    相机座标转化到像平面座标
&lt;/div&gt;
&lt;/h3&gt;
&lt;p&gt;先看一下小孔成像模型，使用虚拟像平面可以把座标转换简化。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://www.singleye.net/media/2022/05/camera-model-6.png&#34; alt=&#34;虚拟像平面&#34;&gt;&lt;/p&gt;
&lt;p&gt;简化后的模型如下图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://www.singleye.net/media/2022/05/camera-model-5.png&#34; alt=&#34;Step3&#34;&gt;&lt;/p&gt;
&lt;p&gt;摄像机座标系与虚拟像平面交于点 $(x_o, y_o)$，摄像机座标系下的点 $O_c$ 在虚拟像平面上的投影点是 $(x&amp;rsquo;, y&amp;rsquo;)$&lt;/p&gt;
&lt;p&gt;通过相似三角形可以容易得到：$ x&amp;rsquo; \over X_c $ = $ y&amp;rsquo; \over Y_c $ = $ f \over Z_c $，也就是：&lt;/p&gt;
$$ x‘ = f \frac {X_c} {Z_c} $$
$$ y’ = f \frac {Y_c} {Z_c} $$
$$ z‘ = f \frac {Z_c} {Z_c} $$
&lt;div&gt;
$$
\left(
	\begin{matrix}
		x&#39; \\\
		y&#39; \\\
		f
	\end{matrix}
\right)=
f/Z
\left(
	\begin{matrix}
		X_c \\\
		Y_c \\\
		Z_c
	\end{matrix}
\right)
$$
&lt;/div&gt;
&lt;p&gt;在摄像机虚拟像平面座标系下（左上角为原点，像素为单位），摄像机座标系与虚拟像平面的交点像素座标为 $(x_o, y_o)$，摄像机座标系下的点 $O_c$ 在虚拟像平面上投影点像素级座标是 $(x, y)$，摄像机 CCD 的像素点在 x 和 y 轴方向上的排列密度为 $\sigma_x$ （单位：pixels/meter）和 $\sigma_y$ （单位：pixels/meter），那么：&lt;/p&gt;
&lt;div&gt;
$$
\left(
	\begin{matrix}
		x&#39; \\\
		y&#39; \\\
		f
	\end{matrix}
\right)=
\left(
	\begin{matrix}
		\frac {x - x_o} {\sigma_x} \\\
		\frac {y - x_o} {\sigma_y} \\\
		f
	\end{matrix}
\right)=
f/Z
\left(
	\begin{matrix}
		X_c \\\
		Y_c \\\
		Z_c
	\end{matrix}
\right)
$$
&lt;/div&gt;
&lt;p&gt;中间式子可以写成下面形式：&lt;/p&gt;
&lt;div&gt;
$$
\left(
	\begin{matrix}
		\frac {x - x_o} {\sigma_x} \\\
		\frac {y - x_o} {\sigma_y} \\\
		f
	\end{matrix}
\right)=
\left(
	\begin{matrix}
		\frac 1 {\sigma_x}		&amp;	0	&amp;	0 \\\
		0	&amp;	\frac 1 {\sigma_y}	&amp;	0 \\\
		0	&amp;	0				&amp;		1
	\end{matrix}
\right)
\left(
	\begin{matrix}
		x - x_o \\\
		y - y_o \\\
		f
	\end{matrix}
\right)=
f/Z
\left(
	\begin{matrix}
		X_c \\\
		Y_c \\\
		Z_c
	\end{matrix}
\right)
$$
&lt;/div&gt;
&lt;p&gt;通过逆矩阵运算得到：&lt;/p&gt;
&lt;div&gt;
$$
\left(
	\begin{matrix}
		x - x_o \\\
		y - y_o \\\
		f
	\end{matrix}
\right)=
f/Z
\left(
	\begin{matrix}
		\sigma_x		&amp;	0	&amp;	0 \\\
		0	&amp;	\sigma_y	&amp;	0 \\\
		0	&amp;	0				&amp;		1
	\end{matrix}
\right)
\left(
	\begin{matrix}
		X_c \\\
		Y_c \\\
		Z_c
	\end{matrix}
\right)
$$
&lt;/div&gt;
&lt;p&gt;再把第一个矩阵拆成下面的形式：&lt;/p&gt;
&lt;div&gt;
$$
\left(
	\begin{matrix}
		x - x_o \\\
		y - y_o \\\
		f
	\end{matrix}
\right)=
\left(
	\begin{matrix}
		1	&amp;	0	&amp;	-\frac {x_o} f 	\\\
		0	&amp;	1	&amp;	-\frac {y_o} f	\\\
		0	&amp;	0	&amp;	1
	\end{matrix}
\right)
\left(
	\begin{matrix}
		x \\\
		y \\\
		f
	\end{matrix}
\right)=
f/Z
\left(
	\begin{matrix}
		\sigma_x		&amp;	0	&amp;	0 \\\
		0	&amp;	\sigma_y	&amp;	0 \\\
		0	&amp;	0				&amp;		1
	\end{matrix}
\right)
\left(
	\begin{matrix}
		X_c \\\
		Y_c \\\
		Z_c
	\end{matrix}
\right)
$$
&lt;/div&gt;
&lt;p&gt;再做矩阵逆运算得到：&lt;/p&gt;
&lt;div&gt;
$$
\left(
	\begin{matrix}
		x \\\
		y \\\
		f
	\end{matrix}
\right)=
f/Z
\left(
	\begin{matrix}
		1	&amp;	0	&amp;	\frac {x_o} f 	\\\
		0	&amp;	1	&amp;	\frac {y_o} f	\\\
		0	&amp;	0	&amp;	1
	\end{matrix}
\right)
\left(
	\begin{matrix}
		\sigma_x		&amp;	0	&amp;	0 \\\
		0	&amp;	\sigma_y	&amp;	0 \\\
		0	&amp;	0				&amp;		1
	\end{matrix}
\right)
\left(
	\begin{matrix}
		X_c \\\
		Y_c \\\
		Z_c
	\end{matrix}
\right)=
1/Z
\left(
	\begin{matrix}
		f \sigma_x	&amp;	0				&amp;	x_o \\\
		0				&amp;	f \sigma_y	&amp;	y_o \\\
		0				&amp;	0				&amp;	1
	\end{matrix}
\right)
\left(
	\begin{matrix}
		X_c \\\
		Y_c \\\
		Z_c
	\end{matrix}
\right)
$$
&lt;/div&gt;
&lt;h2 id=&#34;摄像机数学模型&#34; &gt;
&lt;div&gt;
    &lt;a href=&#34;#%e6%91%84%e5%83%8f%e6%9c%ba%e6%95%b0%e5%ad%a6%e6%a8%a1%e5%9e%8b&#34;&gt;
        #
    &lt;/a&gt;
    摄像机数学模型
&lt;/div&gt;
&lt;/h2&gt;
&lt;p&gt;现在已经有了一个摄像机的数学模型：&lt;/p&gt;
&lt;p&gt;**第一步：**把观察目标从世界坐标旋转到摄像机坐标&lt;/p&gt;
&lt;div&gt;
$$
O_c =
R*
\left(
		O_w - t
\right)=
R*
\left(
	\begin{matrix}
		X_w - t_x \\\
		Y_w - t_y \\\
		Z_w - t_z
	\end{matrix}
\right)
=
\left(
	\begin{matrix}
		X_c \\\
		Y_c \\\
		Z_c
	\end{matrix}
\right)
$$
&lt;/div&gt;
&lt;p&gt;**第二步：**把摄像机坐标转换到摄像机虚拟像平面像素坐标&lt;/p&gt;
&lt;div&gt;
$$
\left(
	\begin{matrix}
		x \\\
		y \\\
		f
	\end{matrix}
\right)=
&lt;p&gt;1/Z
\left(
\begin{matrix}
f \sigma_x	&amp;amp;	0				&amp;amp;	x_o \\
0				&amp;amp;	f \sigma_y	&amp;amp;	y_o \\
0				&amp;amp;	0				&amp;amp;	1
\end{matrix}
\right)
\left(
\begin{matrix}
X_c \\
Y_c \\
Z_c
\end{matrix}
\right)
$$&lt;/p&gt;
&lt;/div&gt;
&lt;h1 id=&#34;实现一个摄像机模型&#34; &gt;
&lt;div&gt;
    &lt;a href=&#34;#%e5%ae%9e%e7%8e%b0%e4%b8%80%e4%b8%aa%e6%91%84%e5%83%8f%e6%9c%ba%e6%a8%a1%e5%9e%8b&#34;&gt;
        ##
    &lt;/a&gt;
    实现一个摄像机模型
&lt;/div&gt;
&lt;/h1&gt;
&lt;p&gt;**第一步：**世界坐标系到相机坐标系转换&lt;/p&gt;
&lt;p&gt;根据摄像机旋转角度计算出旋转矩阵 R：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;      def rotate(self, roll, pitch, yaw):
          &amp;#39;&amp;#39;&amp;#39;
          Rotate camera by roll, pitch, yaw
          &amp;#39;&amp;#39;&amp;#39;
          rx, _ = cv2.Rodrigues((pitch, 0, 0))
 Rodrigues(src, dst=None, jacobian=None, /) -&amp;gt; dst, jacobian                                                                            
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;被观测物体的世界坐标转换到相机坐标：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;      def trans_to_cam(self, v):
          &amp;#39;&amp;#39;&amp;#39;
          Transform the world coordinate vertices to camera coordinate vertices
              v: vertices in world coordinate frame
          &amp;#39;&amp;#39;&amp;#39;
          vc = np.dot(self.R, (v.T - np.array([[self._x], [self._y], [self._z]])))
          return vc.T
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;**第二步：**把相机坐标投影到相机虚拟像平面上&lt;/p&gt;
&lt;p&gt;定义相机内参：包括焦距、CCD像素密度参数，写出相机内参矩阵&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;          # camera focus length in meter
          self._f = 1

          # scale factor: pixels/meter
          self._s = 800
          
          # camera intrinsic matrix
          self.intrinsic = np.array([[self._f*self._s,    0,                  self._canvas_width/2.0],
                                     [0,                  self._f*self._s,    self._canvas_height/2.0],
                                     [0,                  0,                  1]])
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;进行投影转换计算。**注：**由于程序实现时世界/相机坐标系采用的是右手Z轴向前的形式，因此计算结果多了一步转换的运算。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;      def project(self, v):
          &amp;#39;&amp;#39;&amp;#39;
          Project the vertices of camera coordinate to camera image plane coordinate
              v: vertices in camera coordinate frame
                  u = width - f*(Y/X)
                  v = height - f*(Z/X)
          &amp;#39;&amp;#39;&amp;#39;
          Z = np.expand_dims(v[:, -1], axis=1)
          proj_v = np.dot(self.intrinsic, v.T) / Z
          proj_v = proj_v.T
          proj_v[:, 0:2] = [self._canvas_width, self._canvas_height] - proj_v[:, 0:2]
          return proj_v[:, :2]
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;Demo：&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&#34;video_container&#34;&gt;
  &lt;video controls=&#34;true&#34; allowfullscreen=&#34;true&#34; poster=&#34;https://raw.githubusercontent.com/singleye/camera-model/master/examples/camera-model-1.png&#34; width=&#34;400&#34; height=&#34;300&#34;&gt;
    &lt;source src=&#34;https://raw.githubusercontent.com/singleye/camera-model/master/examples/demo.m4v&#34; type=&#34;video/mp4&#34;&gt;
  &lt;/video&gt;
&lt;/figure&gt;
&lt;h1 id=&#34;参考&#34; &gt;
&lt;div&gt;
    &lt;a href=&#34;#%e5%8f%82%e8%80%83&#34;&gt;
        ##
    &lt;/a&gt;
    参考
&lt;/div&gt;
&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/CV-xueba/A01_cvclass_basic&#34;&gt;CS231A 鲁鹏&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://kth.instructure.com/courses/6163&#34;&gt;DD2429 from KTH&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
  </channel>
</rss>
