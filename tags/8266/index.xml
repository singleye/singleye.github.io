<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>8266 on 好奇心是探索未知世界的钥匙</title>
    <link>https://www.singleye.net/tags/8266/</link>
    <description>Recent content in 8266 on 好奇心是探索未知世界的钥匙</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Tue, 20 Mar 2018 16:42:45 +0800</lastBuildDate>
    
	<atom:link href="https://www.singleye.net/tags/8266/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>自动饮水机</title>
      <link>https://www.singleye.net/2018/03/%E8%87%AA%E5%8A%A8%E9%A5%AE%E6%B0%B4%E6%9C%BA/</link>
      <pubDate>Tue, 20 Mar 2018 16:42:45 +0800</pubDate>
      
      <guid>https://www.singleye.net/2018/03/%E8%87%AA%E5%8A%A8%E9%A5%AE%E6%B0%B4%E6%9C%BA/</guid>
      <description>Youtube观看：
  Youku观看:
  </description>
    </item>
    
    <item>
      <title>esp8266启动模式 - 如何理解&#39;rst cause:2, boot mode:(3,6)&#39;</title>
      <link>https://www.singleye.net/2017/05/esp8266%E5%90%AF%E5%8A%A8%E6%A8%A1%E5%BC%8F---%E5%A6%82%E4%BD%95%E7%90%86%E8%A7%A3rst-cause2-boot-mode36/</link>
      <pubDate>Mon, 08 May 2017 00:23:11 +0800</pubDate>
      
      <guid>https://www.singleye.net/2017/05/esp8266%E5%90%AF%E5%8A%A8%E6%A8%A1%E5%BC%8F---%E5%A6%82%E4%BD%95%E7%90%86%E8%A7%A3rst-cause2-boot-mode36/</guid>
      <description>8266模块启动或者出现问题后重启时会输出类似&amp;lsquo;rst cause:2, boot mode:(3,6)&amp;rsquo;的消息，这个模块的启动消息可以看出启动的原因和模式。
rst cause:2, boot mode:(3,6)  &amp;lsquo;rst cause&amp;rsquo; &amp;lsquo;rst cause&amp;rsquo;含义如下：
   编号 描述     0 unknown   1 normal boot   2 reset pin   3 software reset   4 watchdog reset    &amp;lsquo;boot mode&amp;rsquo; 消息中内容的&amp;lsquo;boot mode:(x,y)&amp;rsquo;中的&amp;lsquo;x&amp;rsquo;表示GPIO &amp;lsquo;15/0/2&amp;rsquo; 3个端口的二进制数（有电压为1，没电压为0）。
启动模式 = ((GPIO15 &amp;lt;&amp;lt; 2) | (GPIO0 &amp;lt;&amp;lt; 1) | GPIO2);  由于模块启动的时候会检查0/2/15端口的状态，理解这个数字的意义需要先了解模块的启动模式。
   启动模式 GPIO15 (MTDO) GPIO0 GPIO2 启动模式     0 0V 0V 0V 无效   1 0V 0V 3.</description>
    </item>
    
    <item>
      <title>在ESP 8266 nodeMCU上运行MQTT</title>
      <link>https://www.singleye.net/2017/05/%E5%9C%A8esp-8266-nodemcu%E4%B8%8A%E8%BF%90%E8%A1%8Cmqtt/</link>
      <pubDate>Sun, 07 May 2017 16:20:58 +0800</pubDate>
      
      <guid>https://www.singleye.net/2017/05/%E5%9C%A8esp-8266-nodemcu%E4%B8%8A%E8%BF%90%E8%A1%8Cmqtt/</guid>
      <description>自动接触nodeMCU后发现8266是一个非常好的物联网开发Wi-Fi模块，因此就想把MQTT通讯协议在上面运行起来做些简单的事情。
开发目标  将nodeMCU作为一个MQTT的客户端运行。 使用PubSubClient这个MQTT协议实现。 程序每次启动后先把将芯片设置到STA模式下，并连接指定的WI-FI路由器。 连接建立好之后连接指定的MQTT服务器，并注册从服务器接收数据的topic，并定期将数据（uptime）发送到服务器端指定的topic上。  上传topic：&amp;rdquo;MAC地址/uplink&amp;rdquo; 接收topic：&amp;rdquo;MAC地址/downlink&amp;rdquo;  当收到downlink消息后把数据进行解析并执行，目前只支持&amp;rsquo;blink&amp;rsquo;命令。该命令可以把芯片上的LED灯按照指定的次数点亮的简单操作。  程序开发 程序启动设置 程序启动的入口为&amp;rsquo;setup()&amp;lsquo;函数，这个函数做几件事情：
 设置LED控制PIN模式 将WI-FI芯片设置到STA运行模式，并连接Wi-Fi路由器 连接MQTT服务器，监听&amp;rsquo;downlink&amp;rsquo;消息  程序片段解析：
void setup() { Serial.begin(BAUD_RATE); pinMode(LED_PIN, OUTPUT); // 设置LED控制端口 WiFi.disconnect(); WiFi.mode(WIFI_STA); // 设置启动为STA模式 WiFi.setAutoConnect(true); WiFi.begin(wifi_ssid, wifi_pwd); // 连接Wi-Fi路由器 Serial.printf(&amp;quot;Connecting to AP(%s), password(%s)\n&amp;quot;, wifi_ssid, wifi_pwd); while (WL_CONNECTED != WiFi.status()) { Serial.print(&amp;quot;.&amp;quot;); blink(BLINK_SLOWLY); } Serial.printf(&amp;quot;\nWifi connection is setup!\n&amp;quot;); Serial.printf(&amp;quot;MAC: %s, IP: %s\n&amp;quot;, WiFi.macAddress().c_str(), WiFi.localIP().toString().c_str()); while (!setup_mqtt_connection()) { // 连接MQTT服务器 Serial.print(&amp;quot;.&amp;quot;); blink(BLINK_SLOWLY); } }  连接MQTT服务器 这个方法的工作就是建立连接并且注册接收的topic。</description>
    </item>
    
    <item>
      <title>使用Arduino IDE进行nodeMCU开发</title>
      <link>https://www.singleye.net/2017/04/%E4%BD%BF%E7%94%A8arduino-ide%E8%BF%9B%E8%A1%8Cnodemcu%E5%BC%80%E5%8F%91/</link>
      <pubDate>Wed, 12 Apr 2017 19:10:33 +0800</pubDate>
      
      <guid>https://www.singleye.net/2017/04/%E4%BD%BF%E7%94%A8arduino-ide%E8%BF%9B%E8%A1%8Cnodemcu%E5%BC%80%E5%8F%91/</guid>
      <description>安装Arduino IDE 这两天发现使用Arduino IDE开发nodeMCU(ESP 8266)非常方便，写出来分享一下。
1.下载arduino IDE
Arduino IDE可以在Arduino官网下载到。
2.配置开发板管理器网址
打开preference，用下面的URL设置“附加开发模版管理器网址”：
http://arduino.esp8266.com/stable/package_esp8266com_index.json  3.下载更新8266开发模版
打开“工具”-&amp;gt;“开发板”-&amp;gt;“开发板管理器”，选择“esp8266”并安装。
安装完后在“工具”-&amp;gt;“开发板”中选择对应的开发板型号。
安装USB to UART驱动 nodeMCU自带Silicon Labs的USB芯片，可以直接使用microUSB进行连接，这对于不太熟悉硬件的爱好者是非常友好的。
连接前需要在这里下载驱动：nodeMCU USBtoUART驱动
设置UART端口 现在拿出一根microUSB线将nodeMCU连接到电脑上吧。
此时在Arduino IDE中还需要进行最后一个简单设置：“端口”。设置好这个端口后就可以跟板子进行串口通讯了。
设置过程通过“工具”-&amp;gt;“端口”进行选择。通常情况下应该选择类似&amp;rdquo;/dev/cu.SLAB_USBtoUART&amp;rdquo;字样的那个端口。
开发烧录程序 首先用Arduino IDE自带的例子程序进行说明开发过程。选择&amp;rdquo;文件&amp;rdquo;-&amp;gt;&amp;ldquo;示例&amp;rdquo;-&amp;gt;&amp;ldquo;01.Basics&amp;rdquo;-&amp;gt;&amp;ldquo;Blink&amp;rdquo;，将会打开&amp;rdquo;Blink&amp;rdquo;例子程序。
由于nodeMCU的LED灯连在16号管脚上，因此需要简单修改一下这个例子。
#define ESP8266_LED_BUILTIN 16 // the setup function runs once when you press reset or power the board void setup() { // initialize digital pin LED_BUILTIN as an output. pinMode(ESP8266_LED_BUILTIN, OUTPUT); } // the loop function runs over and over again forever void loop() { digitalWrite(ESP8266_LED_BUILTIN, HIGH); // turn the LED on (HIGH is the voltage level) delay(500); // wait for 0.</description>
    </item>
    
    <item>
      <title>在Mac OS上设置ESP 8266开发环境</title>
      <link>https://www.singleye.net/2017/04/%E5%9C%A8mac-os%E4%B8%8A%E8%AE%BE%E7%BD%AEesp-8266%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/</link>
      <pubDate>Sat, 08 Apr 2017 00:10:24 +0800</pubDate>
      
      <guid>https://www.singleye.net/2017/04/%E5%9C%A8mac-os%E4%B8%8A%E8%AE%BE%E7%BD%AEesp-8266%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/</guid>
      <description>做物联网产品开发有段时间了，虽然开发了两款智能产品，但hands-on的开发一直都在服务器和应用层进行，硬件层的研发并没有真的深入下去。决定有时间也对这个层面学习学习，软硬都能搞才算得上是全栈吧 :-P
要完成一个物联网产品的开发需要解决联网的问题。目前解决联网的比较常用的方案有Wi-Fi和GSM两种（NB-IOT也在上升势头，相信一年后会有较多的应用出现）。这次先学习下乐鑫ESP 8266 WI-FI芯片的开发。
由于我用的是Mac OS，所以就介绍如何在Mac上进行8266的环境设置。
安装使用esp-open-sdk 1.安装依赖关系
brew install gnu-sed --with-default-names brew tap homebrew/dupes brew install gperf brew install grep brew install autoconf brew install binutils brew install gawk brew install wget brew install automake brew install libtool brew install help2man  参考
2.准备case-sensitive分区
由于Mac OS的分区默认是case-insensitive的，而编译需要在case-sensitive的分区上进行，所以需要创建一个独立分区解决这个问题(linux系统上没有这个问题)。
hdiutil create ~/Desktop/eos.dmg -volname &amp;quot;esp-open-sdk&amp;quot; -size 10g -fs &amp;quot;Case-sensitive HFS+&amp;quot; hdiutil mount ~/Desktop/eos.dmg cd /Volumes/esp-open-sdk  3.编译esp-open-sdk
下载代码库，使用&amp;rsquo;&amp;ndash;recursive&amp;rsquo;会同时下载crosstool-NG／esp-open-lwip／esptool／lx106-hal子模块
git clone --recursive https://github.</description>
    </item>
    
  </channel>
</rss>