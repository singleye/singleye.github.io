<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Web on 好奇心是探索未知世界的钥匙</title>
    <link>https://www.singleye.net/post/network/web/</link>
    <description>Recent content in Web on 好奇心是探索未知世界的钥匙</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Sun, 30 Jun 2019 23:10:02 +0800</lastBuildDate>
    
	<atom:link href="https://www.singleye.net/post/network/web/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Firefox cache2 数据结构解析</title>
      <link>https://www.singleye.net/2019/06/firefox-cache2-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E8%A7%A3%E6%9E%90/</link>
      <pubDate>Sun, 30 Jun 2019 23:10:02 +0800</pubDate>
      
      <guid>https://www.singleye.net/2019/06/firefox-cache2-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E8%A7%A3%E6%9E%90/</guid>
      <description>&lt;!--toc--&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>解决flask_restful无法对Decimal类型数据进行序列化问题</title>
      <link>https://www.singleye.net/2019/01/%E8%A7%A3%E5%86%B3flask_restful%E6%97%A0%E6%B3%95%E5%AF%B9decimal%E7%B1%BB%E5%9E%8B%E6%95%B0%E6%8D%AE%E8%BF%9B%E8%A1%8C%E5%BA%8F%E5%88%97%E5%8C%96%E9%97%AE%E9%A2%98/</link>
      <pubDate>Wed, 16 Jan 2019 12:27:13 +0800</pubDate>
      
      <guid>https://www.singleye.net/2019/01/%E8%A7%A3%E5%86%B3flask_restful%E6%97%A0%E6%B3%95%E5%AF%B9decimal%E7%B1%BB%E5%9E%8B%E6%95%B0%E6%8D%AE%E8%BF%9B%E8%A1%8C%E5%BA%8F%E5%88%97%E5%8C%96%E9%97%AE%E9%A2%98/</guid>
      <description>&lt;!--toc--&gt;

&lt;p&gt;在使用flask进行开发的时候发现 &lt;strong&gt;Decimal&lt;/strong&gt; 类型的数据无法在作为 JSON 通过相应消息体序列化返回，出现 &lt;strong&gt;jsonschema.exceptions.ValidationError&lt;/strong&gt; 错误：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;jsonschema.exceptions.ValidationError: &#39;1000.00&#39; is not of type &#39;number&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>使用Python的Selenium驱动浏览器行为</title>
      <link>https://www.singleye.net/2018/03/%E4%BD%BF%E7%94%A8python%E7%9A%84selenium%E9%A9%B1%E5%8A%A8%E6%B5%8F%E8%A7%88%E5%99%A8%E8%A1%8C%E4%B8%BA/</link>
      <pubDate>Fri, 30 Mar 2018 11:25:39 +0800</pubDate>
      
      <guid>https://www.singleye.net/2018/03/%E4%BD%BF%E7%94%A8python%E7%9A%84selenium%E9%A9%B1%E5%8A%A8%E6%B5%8F%E8%A7%88%E5%99%A8%E8%A1%8C%E4%B8%BA/</guid>
      <description>&lt;!--toc--&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Django静态文件配置</title>
      <link>https://www.singleye.net/2017/11/django%E9%9D%99%E6%80%81%E6%96%87%E4%BB%B6%E9%85%8D%E7%BD%AE/</link>
      <pubDate>Thu, 16 Nov 2017 16:23:13 +0800</pubDate>
      
      <guid>https://www.singleye.net/2017/11/django%E9%9D%99%E6%80%81%E6%96%87%E4%BB%B6%E9%85%8D%E7%BD%AE/</guid>
      <description>配置项：
   配置项 说明 例子     STATIC_URL 用户通过web访问静态文件时的URL前缀部分 STATIC_URL=&amp;ldquo;/static/&amp;rdquo;   STATIC_ROOT manager.py collectstatic执行后静态文件会收集存放到 STATIC_ROOT = os.path.join(BASE_DIR, &amp;lsquo;collected_static&amp;rsquo;)   STATICFILES_DIRS 每个app目录中可以创建一个static目录存放对应的静态文件，也可以通过在settings文件中指定STATICFILES_DIRS来指定一个公共的位置存放静态文件 
STATICFILES_DIRS = ( os.path.join(BASE_DIR, &amp;ldquo;common_static&amp;rdquo;), &amp;lsquo;/path/to/others/static/&amp;rsquo;, # 指定一个目录)   STATICFILES_FINDERS 指定静态文件查找器 STATICFILES_FINDERS = ( &amp;ldquo;django.contrib.staticfiles.finders.FileSystemFinder&amp;rdquo;, &amp;ldquo;django.contrib.staticfiles.finders.AppDirectoriesFinder&amp;rdquo;)   DEBUG 如果指定&amp;rsquo;DEBUG=True&amp;rsquo;，那么Django通过STATICFILES_FINDERS指定的查找器寻找静态文件。如果指定&amp;rsquo;DEBUG=False&amp;rsquo;，那么Django不会负责静态文件访问服务，这时可以通过apache或者nginx提供静态文件服务，访问前一般通过&amp;rsquo;collectstatic&amp;rsquo;把项目静态文件收集好后统一部署。     </description>
    </item>
    
    <item>
      <title>使用nginx搭建hugo静态blog服务</title>
      <link>https://www.singleye.net/2017/01/%E4%BD%BF%E7%94%A8nginx%E6%90%AD%E5%BB%BAhugo%E9%9D%99%E6%80%81blog%E6%9C%8D%E5%8A%A1/</link>
      <pubDate>Tue, 10 Jan 2017 09:16:36 +0000</pubDate>
      
      <guid>https://www.singleye.net/2017/01/%E4%BD%BF%E7%94%A8nginx%E6%90%AD%E5%BB%BAhugo%E9%9D%99%E6%80%81blog%E6%9C%8D%E5%8A%A1/</guid>
      <description>之前使用过wordpress搭建过内容管理网站，但是运行环境搭建有些复杂而且页面内容创建需要不够方便，后来关注到静态页面网站框架，发现可以使用markdown进行内容编辑，这对于程序猿来说简直再有好不过了！
简单检索了一下静态内容管理的有很多实现，Ruby的Jekyll，Python的Sphinx doc，Go的Hugo，因为最近在学习Go所以决定搭建一个Hugo来研究下。
使用源码部署hugo 部署golang  $ yum install golang  下载hugo源代码  $ wget https://github.com/spf13/hugo/archive/v0.18.1.tar.gz $ tar xf v0.18.1.tar.gz $ cd hugo-0.18.1/ $ export GOPATH=/usr/local/go $ go get -v github.com/spf13/hugo  hugo的基本使用 创建项目  $ /usr/local/go/bin/hugo new site myblogs  创建post  $ /usr/local/go/bin/hugo new post/first.md  使用themes  $ cd themes/ $ git clone https://github.com/kakawait/hugo-tranquilpeak-theme.git $ cp hugo-tranquilpeak-theme/exampleSite/* ..  构造页面  $ cd content $ mkdir archives $ touch archives/_index.</description>
    </item>
    
  </channel>
</rss>