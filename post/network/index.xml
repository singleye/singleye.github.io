<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Network on 好奇心是探索未知世界的钥匙</title>
    <link>https://www.singleye.net/post/network/</link>
    <description>Recent content in Network on 好奇心是探索未知世界的钥匙</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Sun, 01 Sep 2019 15:28:41 +0800</lastBuildDate>
    
	<atom:link href="https://www.singleye.net/post/network/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>ssh代理方法</title>
      <link>https://www.singleye.net/2019/09/ssh%E4%BB%A3%E7%90%86%E6%96%B9%E6%B3%95/</link>
      <pubDate>Sun, 01 Sep 2019 15:28:41 +0800</pubDate>
      
      <guid>https://www.singleye.net/2019/09/ssh%E4%BB%A3%E7%90%86%E6%96%B9%E6%B3%95/</guid>
      <description>&lt;!--toc--&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>说一说反弹shell</title>
      <link>https://www.singleye.net/2018/04/%E8%AF%B4%E4%B8%80%E8%AF%B4%E5%8F%8D%E5%BC%B9shell/</link>
      <pubDate>Mon, 09 Apr 2018 23:59:32 +0800</pubDate>
      
      <guid>https://www.singleye.net/2018/04/%E8%AF%B4%E4%B8%80%E8%AF%B4%E5%8F%8D%E5%BC%B9shell/</guid>
      <description>&lt;!--toc--&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>用scrapy爬取京东商品信息</title>
      <link>https://www.singleye.net/2017/08/%E7%94%A8scrapy%E7%88%AC%E5%8F%96%E4%BA%AC%E4%B8%9C%E5%95%86%E5%93%81%E4%BF%A1%E6%81%AF/</link>
      <pubDate>Thu, 31 Aug 2017 09:46:00 +0000</pubDate>
      
      <guid>https://www.singleye.net/2017/08/%E7%94%A8scrapy%E7%88%AC%E5%8F%96%E4%BA%AC%E4%B8%9C%E5%95%86%E5%93%81%E4%BF%A1%E6%81%AF/</guid>
      <description>scrapy是一个非常著名的爬虫框架，使用这个框架可以非常容易的生成一个网站爬虫程序框架，之后就可以在框架之上方便的进行爬虫的编写。
进来想要了解一些产品的市场信息，就用scrapy写了个简单的爬虫，写个笔记记录一下。
安装 使用python环境的话最好通过pip进行安装，这样操作简单方便，直接使用下面的命令即可：
$ pip install scrapy  scrapy框架提供了&amp;rsquo;scrapy&amp;rsquo;命令进行项目的创建及运行管理，所以首先看一下
$ scrapy --help Scrapy 1.4.0 - no active project Usage: scrapy &amp;lt;command&amp;gt; [options] [args] Available commands: bench Run quick benchmark test fetch Fetch a URL using the Scrapy downloader genspider Generate new spider using pre-defined templates runspider Run a self-contained spider (without creating a project) settings Get settings values shell Interactive scraping console startproject Create new project version Print Scrapy version view Open URL in browser, as seen by Scrapy [ more ] More commands available when run from project directory Use &amp;quot;scrapy &amp;lt;command&amp;gt; -h&amp;quot; to see more info about a command  创建项目 首先使用&amp;rsquo;scrapy startproject&amp;rsquo;创建项目</description>
    </item>
    
    <item>
      <title>nmap NSE脚本中host/port的内容</title>
      <link>https://www.singleye.net/2017/06/nmap-nse%E8%84%9A%E6%9C%AC%E4%B8%ADhost/port%E7%9A%84%E5%86%85%E5%AE%B9/</link>
      <pubDate>Sun, 04 Jun 2017 21:12:03 +0800</pubDate>
      
      <guid>https://www.singleye.net/2017/06/nmap-nse%E8%84%9A%E6%9C%AC%E4%B8%ADhost/port%E7%9A%84%E5%86%85%E5%AE%B9/</guid>
      <description>周末写了一个简单的nmap的NSE脚本，其中使用了nmap API中的host,port两个变量，数据结构记录。
Host
   Key Value     registry table: 0x7feae1dc5080   name    reason_ttl 0   bin_ip    ip 192.168.1.10   reason user-set   interface_mtu 0   times table: 0x7feae1d9dbf0       Key Value     number 443   reason syn-ack   version table: 0x7feae1dfb720   state open   reason_ttl 0   service https   protocol tcp    https://nmap.</description>
    </item>
    
    <item>
      <title>如何在CentOS上部署shadowsocks服务</title>
      <link>https://www.singleye.net/2017/05/%E5%A6%82%E4%BD%95%E5%9C%A8centos%E4%B8%8A%E9%83%A8%E7%BD%B2shadowsocks%E6%9C%8D%E5%8A%A1/</link>
      <pubDate>Mon, 01 May 2017 23:39:03 +0800</pubDate>
      
      <guid>https://www.singleye.net/2017/05/%E5%A6%82%E4%BD%95%E5%9C%A8centos%E4%B8%8A%E9%83%A8%E7%BD%B2shadowsocks%E6%9C%8D%E5%8A%A1/</guid>
      <description>shadowsocks简单介绍 shadowsocks是目前较流行的一种科学上网服务。他的工作原理也比较简单，shadowsocks本质上是socks5代理技术，然而架构方式上将单服务节点拆分成两个子服务：SS Local和SS Server。
工作过程如下：
 当本地请求端需要访问时首先将请求发送至本地SS Local服务 SS Local将数据加密在网络上传输到SS Server，由于信息经过加密不会被GFW提取到特征数据，因此也就翻了墙 SS Server收到数据后解密并访问真正的远程服务资源 远程返回数据返回到SS Server SS Server将数据加密传输给SS Local SS Local收到返回数据解密后发给本地请求端  部署shadow socks服务 (SS Server) 安装服务 shadowsocks服务的部署也极为简单，已经有完善的脚本帮助安装，需要稍微注意下的就是安装过程需要root权限，安装方法如下：
# wget --no-check-certificate -O shadowsocks.sh https://raw.githubusercontent.com/teddysun/shadowsocks_install/master/shadowsocks.sh # sh shadowsocks.sh  配置服务 shadowsocks的配置文件是&amp;rsquo;/etc/shadowsocks.json&amp;rsquo;，一个简单的配置文件的写法可以参考这个例子。
# cat /etc/shadowsocks.json { &amp;quot;server&amp;quot;:&amp;quot;0.0.0.0&amp;quot;, &amp;quot;port_password&amp;quot;:{ &amp;quot;8989&amp;quot;:&amp;quot;password1&amp;quot;, &amp;lt;--- 第一个服务端口及访问密码 &amp;quot;8990&amp;quot;:&amp;quot;password2&amp;quot; &amp;lt;--- 多个服务端口指定方法 }, &amp;quot;timeout&amp;quot;:300, &amp;quot;method&amp;quot;:&amp;quot;aes-256-cfb&amp;quot;, &amp;lt;--- 注意这个加密方式，配置SS Local需要使用 &amp;quot;fast_open&amp;quot;:false, &amp;quot;workers&amp;quot;:2 }  多数情况下一个端口就可以满足使用了，这个例子中提供了多个访问端口的配置方法，具体用法可以根据自己的实际情况配置。
启动服务 服务安装过程同时会安装一个启动脚本&amp;rsquo;/etc/init.d/shadowsocks&amp;rsquo;，启动方法也很简单。
# service shadowsocks start  为了确保每次系统启动后服务会自动运行最好将服务使用chkconfig进行启用，这样就不必担心系统被运营商或者管理员维护重启后无法使用了。</description>
    </item>
    
    <item>
      <title>阿里云ECS EIP服务进行IPv6改造的方法</title>
      <link>https://www.singleye.net/2017/01/%E9%98%BF%E9%87%8C%E4%BA%91ecs-eip%E6%9C%8D%E5%8A%A1%E8%BF%9B%E8%A1%8Cipv6%E6%94%B9%E9%80%A0%E7%9A%84%E6%96%B9%E6%B3%95/</link>
      <pubDate>Wed, 18 Jan 2017 18:56:51 +0800</pubDate>
      
      <guid>https://www.singleye.net/2017/01/%E9%98%BF%E9%87%8C%E4%BA%91ecs-eip%E6%9C%8D%E5%8A%A1%E8%BF%9B%E8%A1%8Cipv6%E6%94%B9%E9%80%A0%E7%9A%84%E6%96%B9%E6%B3%95/</guid>
      <description>最近团队开发的APP提交到苹果APP store时被拒了，原因是不支持IPv6的访问。原来苹果App store从2016年6月开始强制新上线APP支持IPv6网络，但由于IPv6基础设施在国内的推广非常缓慢，因此导致了该问题。
IPv6介绍 为了理解IPv6需要先了解其产生的原因，就是IPv4地址资源的问题。IPv4的网络使用32位的地址空间（XX.XX.XX.XX），因此最大支持的数量是4,294,967,296（2^32个），其中还有1800多万个私有地址和2.7亿个多播地址。互联网的发展显然超出了普通的32位地址空间的容量，IPv6地址使用128位的地址空间，这意味着几乎取之不尽的地址空间。另外IPv6比IPv4还进行了很多的改进与扩充。
IPv6地址  冒分16进制表示法（XXXX:XXXX:XXXX:XXXX:XXXX:XXXX:XXXX:XXXX），每个部分中的0可以省略。比如：2001:0DB8:0000:0023:0008:0800:200C:417A 可以缩写为2001:DB8:0:23:8:800:200C:417A
 0位压缩。如果地址中包含很多连续的0，可以把0压缩为&amp;rdquo;::&amp;ldquo;，并且&amp;rdquo;::&amp;ldquo;只能出现1次。 比如 FF01:0:0:0:0:0:0:1101 可以缩略为 FF01::1101
 内嵌IPv4地址表示法。为了实现IPv4-IPv6互通，IPv4地址会嵌入IPv6地址中，此时地址常表示为：X:X:X:X:X:X:d.d.d.d，前96b采用冒分十六进制表示，而最后32b地址则使用IPv4的点分十进制表示，例如::192.168.0.1与::FFFF:192.168.0.1就是两个典型的例子，注意在前96b中，压缩0位的方法依旧适用。
  IPv6地址分类    地址类型 IPv4 IPv6     单播(unicast) Yes Yes   组播(multicast) Yes Yes   任播(anycast) No Yes   广播 Yes No (通过组播来达到类似目的)    IPv6的地址类型通过地址的前缀进行区别
   IPv6地址类型 前缀标识     Loopback (unicast) ::1&amp;frasl;128   Link local (unicast) FE80::/10   Site local (unicast) FEC0::/10   Global (unicast)    multicast FF00::/8   anycast 从单播地址空间中分配    IPv4 vs IPv6 IPv6比IPv4的优势： 1.</description>
    </item>
    
    <item>
      <title>搭建SoftEther VPN 服务</title>
      <link>https://www.singleye.net/2017/01/%E6%90%AD%E5%BB%BAsoftether-vpn-%E6%9C%8D%E5%8A%A1/</link>
      <pubDate>Tue, 10 Jan 2017 15:22:39 +0000</pubDate>
      
      <guid>https://www.singleye.net/2017/01/%E6%90%AD%E5%BB%BAsoftether-vpn-%E6%9C%8D%E5%8A%A1/</guid>
      <description>最近在公司内部架了台服务器给团队的同学们使用，可是在公司外面的时候就没办法再继续访问上面的资源了实在不太方便，虽然利用公司路由器的可以将服务器端口映射出去，但这样做只能访问部分资源，还是搭建一套VPN服务器更加适合所有人的需求。
研究了一下PPP/L2TP，但PPP已经在iOS设备上见不到了，L2TP又对CentOS 7.3支持不友好，后来找到了SoftEther，发现不仅协议支持全面而且支持命令行／图形界面的管理工具，使用和管理都很方便。
搭建方法 通过Local bridge的方式访问远程网络 具体过程可以参照官方文档，这种方法也是我最开始使用的方法，但搭建好之后发现这种连接的设备无法访问搭建VPN的服务器本身，但是我们这台服务器上提供了需要大家访问的资源，因此这对与我们公司来说是无法接受的。原因也可以理解，因为Linux不允许访问Local bridge网络接口对应的IP。具体可以参考官方文档的解释：
 Limitations within the Linux or UNIX operating system prevent communication with IP addresses assigned to the network adapter locally bridged from the VPN side (Virtual Hub side). The cause of this restriction lies with OS&amp;rsquo;s internal kernel codes rather than with the SoftEther VPN. When wishing to communicate in any form with a UNIX computer used for local bridging from the VPN side (Virtual Hub side), (for instance, when running both the VPN Server / VPN Bridge service &amp;amp; the HTTP Server service and wishing to grant access to the server service from the VPN side as well), prepare and connect a local bridge network adapter and physically connect both it and the existing network adapter to the same segment (as explained in 3.</description>
    </item>
    
  </channel>
</rss>