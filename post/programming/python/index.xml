<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Python on singleye</title>
    <link>/post/programming/python/</link>
    <description>singleye (Python)</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <managingEditor>**Email:** [singleye512@gmail.com](mailto:singleye512@gmail.com) (singleye)</managingEditor>
    <webMaster>**Email:** [singleye512@gmail.com](mailto:singleye512@gmail.com) (singleye)</webMaster>
    <lastBuildDate>Sun, 10 Dec 2023 11:40:29 +0800</lastBuildDate>
    
    <atom:link href="/post/programming/python/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>django-rest-framework 和 simplejwt 的类关系</title>
      <link>/2023/12/django-rest-framework-%E5%92%8C-simplejwt-%E7%9A%84%E7%B1%BB%E5%85%B3%E7%B3%BB/</link>
      <pubDate>Sun, 10 Dec 2023 11:40:29 +0800</pubDate>
      <author>**Email:** [singleye512@gmail.com](mailto:singleye512@gmail.com) (singleye)</author>
      <guid>/2023/12/django-rest-framework-%E5%92%8C-simplejwt-%E7%9A%84%E7%B1%BB%E5%85%B3%E7%B3%BB/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://singleye-public-read.oss-cn-shanghai.aliyuncs.com/singleye.net/static/Programming/Python/django-rest-framework/django-rest-framework.png&#34; alt=&#34;django_rest_framework&#34;&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Python 内存管理</title>
      <link>/2023/11/python-%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/</link>
      <pubDate>Tue, 21 Nov 2023 14:40:28 +0800</pubDate>
      <author>**Email:** [singleye512@gmail.com](mailto:singleye512@gmail.com) (singleye)</author>
      <guid>/2023/11/python-%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/</guid>
      <description>&lt;h1 id=&#34;引用和对象&#34; &gt;
&lt;div&gt;
    &lt;a href=&#34;#%e5%bc%95%e7%94%a8%e5%92%8c%e5%af%b9%e8%b1%a1&#34;&gt;
        ##
    &lt;/a&gt;
    引用和对象
&lt;/div&gt;
&lt;/h1&gt;
&lt;p&gt;&lt;img src=&#34;https://singleye-public-read.oss-cn-shanghai.aliyuncs.com/singleye.net/static/Programming/Python/python-memory/python-obj-ref.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;python 会缓冲短字符串和小整数对象（-5 ~ 256），多个引用会引用同一个对象&lt;/li&gt;
&lt;li&gt;python 不会缓冲场字符串、容器、其他对象&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;对象&#34; &gt;
&lt;div&gt;
    &lt;a href=&#34;#%e5%af%b9%e8%b1%a1&#34;&gt;
        #
    &lt;/a&gt;
    对象
&lt;/div&gt;
&lt;/h2&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;typedef struct_object{

　　int ob_refcnt;

　　struct_typeobject *ob_type;

}PyObject;
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;ob_refcnt：引用计数&lt;/li&gt;
&lt;li&gt;ob_type：类型的类型（元类型 metatype）&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;对象引用计数&#34; &gt;
&lt;div&gt;
    &lt;a href=&#34;#%e5%af%b9%e8%b1%a1%e5%bc%95%e7%94%a8%e8%ae%a1%e6%95%b0&#34;&gt;
        ##
    &lt;/a&gt;
    对象引用计数
&lt;/div&gt;
&lt;/h1&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;sys.getrefcount()
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;sys.getrefcount() 调用时因为 getrefcount() 也会增加引用，所以结果会比实际 ref count 大 1&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;gc&#34; &gt;
&lt;div&gt;
    &lt;a href=&#34;#gc&#34;&gt;
        ##
    &lt;/a&gt;
    GC
&lt;/div&gt;
&lt;/h1&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; import gc
&amp;gt;&amp;gt;&amp;gt; gc.get_threshold()
(700, 10, 10)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;代际和 GC：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;0 代：年轻代，对应 get_threshold() 第 1 项（700）
&lt;ul&gt;
&lt;li&gt;当 “新分配的对象(object allocation) - 释放的对象(object deallocation)” 大于 700 时触发 0 代扫描&lt;/li&gt;
&lt;li&gt;当引用计数为 0 时放入 1 代&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;1 代：中年代，对应 get_threshold() 第 2 项（10）
&lt;ul&gt;
&lt;li&gt;当 0 代进行了 10 次扫描时触发扫描&lt;/li&gt;
&lt;li&gt;当引用计数为 0 时放入 2 代&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2 代：老年代，对应 get_threshold() 第 3 项（10）
&lt;ul&gt;
&lt;li&gt;当 1 代进行了 10 次扫描时出发扫描&lt;/li&gt;
&lt;li&gt;当引用技术为 0 释放&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;手动触发 GC&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; result = gc.collect()
&amp;gt;&amp;gt;&amp;gt; print(result)
5
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;内存池机制&#34; &gt;
&lt;div&gt;
    &lt;a href=&#34;#%e5%86%85%e5%ad%98%e6%b1%a0%e6%9c%ba%e5%88%b6&#34;&gt;
        ##
    &lt;/a&gt;
    内存池机制
&lt;/div&gt;
&lt;/h1&gt;
&lt;h2 id=&#34;内存管理空间结构&#34; &gt;
&lt;div&gt;
    &lt;a href=&#34;#%e5%86%85%e5%ad%98%e7%ae%a1%e7%90%86%e7%a9%ba%e9%97%b4%e7%bb%93%e6%9e%84&#34;&gt;
        #
    &lt;/a&gt;
    内存管理空间结构
&lt;/div&gt;
&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;https://singleye-public-read.oss-cn-shanghai.aliyuncs.com/singleye.net/static/Programming/Python/python-memory/memory-hierarchy.png&#34; alt=&#34;memory hierarchy&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;arena&lt;/li&gt;
&lt;li&gt;pool&lt;/li&gt;
&lt;li&gt;block&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;分层&#34; &gt;
&lt;div&gt;
    &lt;a href=&#34;#%e5%88%86%e5%b1%82&#34;&gt;
        #
    &lt;/a&gt;
    分层
&lt;/div&gt;
&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;https://singleye-public-read.oss-cn-shanghai.aliyuncs.com/singleye.net/static/Programming/Python/python-memory/python-memory-layers.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;分配调用栈：
&lt;img src=&#34;https://singleye-public-read.oss-cn-shanghai.aliyuncs.com/singleye.net/static/Programming/Python/python-memory/allocation-stack.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://singleye-public-read.oss-cn-shanghai.aliyuncs.com/singleye.net/static/Programming/Python/python-memory/allocation.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;第-0-层&#34; &gt;
&lt;div&gt;
    &lt;a href=&#34;#%e7%ac%ac-0-%e5%b1%82&#34;&gt;
        ##
    &lt;/a&gt;
    第 0 层
&lt;/div&gt;
&lt;/h3&gt;
&lt;p&gt;对接 OS 分配 python 所需内存&lt;/p&gt;
&lt;h3 id=&#34;第-1-层&#34; &gt;
&lt;div&gt;
    &lt;a href=&#34;#%e7%ac%ac-1-%e5%b1%82&#34;&gt;
        ##
    &lt;/a&gt;
    第 1 层
&lt;/div&gt;
&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;管理 arena&lt;/li&gt;
&lt;li&gt;arena 大小 256 KB&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;第-2-层&#34; &gt;
&lt;div&gt;
    &lt;a href=&#34;#%e7%ac%ac-2-%e5%b1%82&#34;&gt;
        ##
    &lt;/a&gt;
    第 2 层
&lt;/div&gt;
&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;管理 pool 和 block&lt;/li&gt;
&lt;li&gt;pool 大小 4 KB&lt;/li&gt;
&lt;li&gt;block 小于 4 KB&lt;/li&gt;
&lt;li&gt;block 状态：
&lt;ul&gt;
&lt;li&gt;已分配&lt;/li&gt;
&lt;li&gt;使用完毕&lt;/li&gt;
&lt;li&gt;未使用&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;第-3-层&#34; &gt;
&lt;div&gt;
    &lt;a href=&#34;#%e7%ac%ac-3-%e5%b1%82&#34;&gt;
        ##
    &lt;/a&gt;
    第 3 层
&lt;/div&gt;
&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;管理 python 对象使用的内存&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;参考&#34; &gt;
&lt;div&gt;
    &lt;a href=&#34;#%e5%8f%82%e8%80%83&#34;&gt;
        ##
    &lt;/a&gt;
    参考
&lt;/div&gt;
&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://bbs.huaweicloud.com/blogs/382075&#34;&gt;https://bbs.huaweicloud.com/blogs/382075&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://juejin.cn/post/6856235545220415496&#34;&gt;https://juejin.cn/post/6856235545220415496&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>python2 和 python3 的一些区别</title>
      <link>/2018/02/python2-%E5%92%8C-python3-%E7%9A%84%E4%B8%80%E4%BA%9B%E5%8C%BA%E5%88%AB/</link>
      <pubDate>Mon, 26 Feb 2018 23:30:06 +0800</pubDate>
      <author>**Email:** [singleye512@gmail.com](mailto:singleye512@gmail.com) (singleye)</author>
      <guid>/2018/02/python2-%E5%92%8C-python3-%E7%9A%84%E4%B8%80%E4%BA%9B%E5%8C%BA%E5%88%AB/</guid>
      <description>&lt;h1 id=&#34;python2与python3的区别&#34; &gt;
&lt;div&gt;
    &lt;a href=&#34;#python2%e4%b8%8epython3%e7%9a%84%e5%8c%ba%e5%88%ab&#34;&gt;
        ##
    &lt;/a&gt;
    python2与python3的区别
&lt;/div&gt;
&lt;/h1&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;区别点&lt;/th&gt;
&lt;th&gt;python2&lt;/th&gt;
&lt;th&gt;python3&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;write()&lt;/td&gt;
&lt;td&gt;可以直接写utf8内容&lt;/td&gt;
&lt;td&gt;写utf8内容碰到：TypeError: write() argument must be str, not bytes&lt;/br&gt;解决方法：open(file, &amp;lsquo;wb&amp;rsquo;)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;super()&lt;/td&gt;
&lt;td&gt;super(CLASS_NAME, self).method()&lt;/td&gt;
&lt;td&gt;super().method()&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;/&lt;/td&gt;
&lt;td&gt;除法运算，结果取整数&lt;/td&gt;
&lt;td&gt;除法运算，结果为浮点数，取证书使用“//”&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;dict&lt;/td&gt;
&lt;td&gt;has_key()可以用来查询是否存在某个键&lt;/td&gt;
&lt;td&gt;has_key()方法不存了，使用&amp;rsquo;key in dictionary&amp;rsquo;来查询(python2也支持该方法)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h1 id=&#34;python3的新特性&#34; &gt;
&lt;div&gt;
    &lt;a href=&#34;#python3%e7%9a%84%e6%96%b0%e7%89%b9%e6%80%a7&#34;&gt;
        ##
    &lt;/a&gt;
    python3的新特性
&lt;/div&gt;
&lt;/h1&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;新特性&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;th&gt;参考&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;@&lt;/td&gt;
&lt;td&gt;矩阵乘法运算符，目前还没有定义built-in的矩阵数据类型&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://www.python.org/dev/peps/pep-0465&#34;&gt;PEP 465 - A dedicated infix operator for matrix multiplication&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;/&lt;/td&gt;
&lt;td&gt;除法运算，结果浮点数&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;//&lt;/td&gt;
&lt;td&gt;除法运算，结果取整数&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</description>
    </item>
    
    <item>
      <title>python中__main__的作用域及变量使用</title>
      <link>/2017/06/python%E4%B8%AD__main__%E7%9A%84%E4%BD%9C%E7%94%A8%E5%9F%9F%E5%8F%8A%E5%8F%98%E9%87%8F%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Sat, 10 Jun 2017 23:00:31 +0800</pubDate>
      <author>**Email:** [singleye512@gmail.com](mailto:singleye512@gmail.com) (singleye)</author>
      <guid>/2017/06/python%E4%B8%AD__main__%E7%9A%84%E4%BD%9C%E7%94%A8%E5%9F%9F%E5%8F%8A%E5%8F%98%E9%87%8F%E4%BD%BF%E7%94%A8/</guid>
      <description>&lt;p&gt;今天使用python写一段小程序时发现了一个容易忽略掉的变量作用域的细节。先看一下问题。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ cat main_variable.py
x = 1

if __name__ == &amp;#34;__main__&amp;#34;:
    global x
    x = 2

$ python main_area.py
main_area.py:4: SyntaxWarning: name &amp;#39;x&amp;#39; is assigned to before global declaration
  global x
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;程序的本来目的是在对全局变量前使用global进行声明，但却引发了SyntaxWarning异常。问题原因其实也很简单，因为虽然使用&amp;rsquo;if &lt;strong&gt;name&lt;/strong&gt; == &amp;ldquo;&lt;strong&gt;main&lt;/strong&gt;&amp;quot;&amp;lsquo;进行判断后再执行，但代码还是处于整个文件的作用域中，因此并不需要使用global进行声明。&lt;/p&gt;
&lt;p&gt;因此程序可以有下面两种改法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;方法1:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ cat main_variable.py
x = 1

if __name__ == &amp;#34;__main__&amp;#34;:
    x = 2

$ python main_area.py
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;方法2:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ cat main_variable.py
x = 1

def main():
    global x
    x = 2

if __name__ == &amp;#34;__main__&amp;#34;:
    main()

$ python main_area.py
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;写程序一定要注意细节啊！&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>numpy学习笔记[1]</title>
      <link>/2017/03/numpy%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B01/</link>
      <pubDate>Thu, 16 Mar 2017 14:45:31 +0800</pubDate>
      <author>**Email:** [singleye512@gmail.com](mailto:singleye512@gmail.com) (singleye)</author>
      <guid>/2017/03/numpy%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B01/</guid>
      <description>&lt;h1 id=&#34;numpy数据结构&#34; &gt;
&lt;div&gt;
    &lt;a href=&#34;#numpy%e6%95%b0%e6%8d%ae%e7%bb%93%e6%9e%84&#34;&gt;
        ##
    &lt;/a&gt;
    numpy数据结构
&lt;/div&gt;
&lt;/h1&gt;
&lt;h2 id=&#34;基本数据&#34; &gt;
&lt;div&gt;
    &lt;a href=&#34;#%e5%9f%ba%e6%9c%ac%e6%95%b0%e6%8d%ae&#34;&gt;
        #
    &lt;/a&gt;
    &lt;em&gt;基本数据&lt;/em&gt;
&lt;/div&gt;
&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;数据类型&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;bool&lt;/td&gt;
&lt;td&gt;用一个字节存储的布尔类型（True或False）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;inti&lt;/td&gt;
&lt;td&gt;由所在平台决定其大小的整数（一般为int32或int64）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;int8&lt;/td&gt;
&lt;td&gt;一个字节大小，-128 至 127&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;int16&lt;/td&gt;
&lt;td&gt;整数，-32768 至 32767&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;int32&lt;/td&gt;
&lt;td&gt;整数，-2 ** 31 至 2 ** 32 -1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;int64&lt;/td&gt;
&lt;td&gt;整数，-2 ** 63 至 2 ** 63 - 1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;uint8&lt;/td&gt;
&lt;td&gt;无符号整数，0 至 255&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;uint16&lt;/td&gt;
&lt;td&gt;无符号整数，0 至 65535&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;uint32&lt;/td&gt;
&lt;td&gt;无符号整数，0 至 2 ** 32 - 1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;uint64&lt;/td&gt;
&lt;td&gt;无符号整数，0 至 2 ** 64 - 1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;float16&lt;/td&gt;
&lt;td&gt;半精度浮点数：16位，正负号1位，指数5位，精度10位&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;float32&lt;/td&gt;
&lt;td&gt;单精度浮点数：32位，正负号1位，指数8位，精度23位&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;float64或float&lt;/td&gt;
&lt;td&gt;双精度浮点数：64位，正负号1位，指数11位，精度52位&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;complex64&lt;/td&gt;
&lt;td&gt;复数，分别用两个32位浮点数表示实部和虚部&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;complex128或complex&lt;/td&gt;
&lt;td&gt;复数，分别用两个64位浮点数表示实部和虚部&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;array&#34; &gt;
&lt;div&gt;
    &lt;a href=&#34;#array&#34;&gt;
        #
    &lt;/a&gt;
    &lt;em&gt;array&lt;/em&gt;
&lt;/div&gt;
&lt;/h2&gt;
&lt;p&gt;‘array’表示元素数据大小固定的同质（相同数据类型）多维度数据。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; from numpy import *
&amp;gt;&amp;gt;&amp;gt; g = array([[1,2],[3,4],[5,6],[7,8]], dtype=int64)

# ndim: 数组的维度数
&amp;gt;&amp;gt;&amp;gt; g.ndim
2

# shape: 数组在行／列各维度上的大小
&amp;gt;&amp;gt;&amp;gt; g.shape
(4, 2)

# size: 数组包含的元素个数
&amp;gt;&amp;gt;&amp;gt; g.size
8

# dtype: 数组中元素的数据类型
&amp;gt;&amp;gt;&amp;gt; g.dtype
dtype(&amp;#39;int64&amp;#39;)

# itemsize: 数组中元素的数据大小（字节）
&amp;gt;&amp;gt;&amp;gt; g.itemsize
8

# data：数组中数据的buffer
&amp;gt;&amp;gt;&amp;gt; bytes(g.data)
&amp;#39;\x01\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\x00\x00\x00\x00\x04\x00\x00\x00\x00\x00\x00\x00\x05\x00\x00\x00\x00\x00\x00\x00\x06\x00\x00\x00\x00\x00\x00\x00\x07\x00\x00\x00\x00\x00\x00\x00\x08\x00\x00\x00\x00\x00\x00\x00&amp;#39;

# min(): 按照输入的轴（维度）对数据进行排序，输出最小的维度
&amp;gt;&amp;gt;&amp;gt; g3
array([[3, 5],
       [1, 6],
       [7, 1],
       [9, 0]])
# min(0): 将每列数据在列方向上进行排序后输出最小的一行（第0维）
&amp;gt;&amp;gt;&amp;gt; g3.min(0)
array([1, 0])
# min(1): 将每行数据在行方向上进行排序后输出最小的一列（第1维）
&amp;gt;&amp;gt;&amp;gt; g3.min(1)
array([3, 1, 1, 0])
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;numpy函数&#34; &gt;
&lt;div&gt;
    &lt;a href=&#34;#numpy%e5%87%bd%e6%95%b0&#34;&gt;
        ##
    &lt;/a&gt;
    numpy函数
&lt;/div&gt;
&lt;/h1&gt;
&lt;h2 id=&#34;tile&#34; &gt;
&lt;div&gt;
    &lt;a href=&#34;#tile&#34;&gt;
        #
    &lt;/a&gt;
    &lt;em&gt;tile&lt;/em&gt;
&lt;/div&gt;
&lt;/h2&gt;
&lt;p&gt;**功能：**将数组的“秩”在（行，列）方向上进行堆叠扩展&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; from numpy import *
&amp;gt;&amp;gt;&amp;gt; g = array([[1,2],[3,4],[5,6],[7,8]])
&amp;gt;&amp;gt;&amp;gt; g
array([[1, 2],
       [3, 4],
       [5, 6],
       [7, 8]])

# 行和列保持和原来一样
&amp;gt;&amp;gt;&amp;gt; tile(g,(1,1))
array([[1, 2],
       [3, 4],
       [5, 6],
       [7, 8]])

# 行保持一样，列方向堆叠为原来2倍
&amp;gt;&amp;gt;&amp;gt; tile(g,(1,2))
array([[1, 2, 1, 2],
       [3, 4, 3, 4],
       [5, 6, 5, 6],
       [7, 8, 7, 8]])

# 行和列方向都堆叠为原来2倍
&amp;gt;&amp;gt;&amp;gt; tile(g,(2,2))
array([[1, 2, 1, 2],
       [3, 4, 3, 4],
       [5, 6, 5, 6],
       [7, 8, 7, 8],
       [1, 2, 1, 2],
       [3, 4, 3, 4],
       [5, 6, 5, 6],
       [7, 8, 7, 8]])
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
  </channel>
</rss>
